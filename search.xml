<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Safari 使用 Opus 编码</title>
      <link href="/2020/05/25/ProvideCAFForSAfari/"/>
      <url>/2020/05/25/ProvideCAFForSAfari/</url>
      
        <content type="html"><![CDATA[<h2 id="Vorbis-与-Opus-编码"><a href="#Vorbis-与-Opus-编码" class="headerlink" title="Vorbis 与 Opus 编码"></a>Vorbis 与 Opus 编码</h2><p>摘自 Wikipedia:</p><h3 id="Vorbis"><a href="#Vorbis" class="headerlink" title="Vorbis"></a>Vorbis</h3><blockquote><p>Vorbis 是一種有損音訊壓縮格式，由 Xiph.Org 基金會所領導並開放原始碼的一個免費的開源軟件項目。該項目為有損音頻壓縮產生音頻編碼格式和軟件參考編碼器╱解碼器（編解碼器）。Vorbis 通常以 Ogg 作為容器格式，所以常合稱為 Ogg Vorbis。<br>Vorbis 是 1993 年由克里斯·蒙哥馬利開始的音頻壓縮開發的延續。1998 年 9 月，夫朗和斐協會宣布計劃收取 MP3 音頻格式的專利許可費用，该事件触发了 Vorbis 的密集开发 。Vorbis 項目是 Xiphophorus 公司的 Ogg 項目（也稱為 OggSquish 多媒體項目）的一部分。克里斯·蒙哥馬利開始了這個項目的工作，並得到越來越多的其他開發者的幫助。他們繼續改進源代碼，直到 Vorbis 文件格式在 2000 年 5 月被凍結為 1.0。原來授權為 LGPL，2001 年，Vorbis 許可證被更改為 BSD 許可證，以鼓勵採納，理查德·斯托曼參考軟件的穩定版本（1.0）於 2002 年 7 月 19 日發布 。<br>Xiph.Org 基金會維護一個參考實現編解碼器 libvorbis。還有一些微調的分支，最引人注目的是 aoTuV，提供更好的音頻質量，特別是在低比特率。這些改進會定期地合併回參考代碼庫。<br>目前 Xiph.Org 基金會建議使用延遲更低、音質更好的 Opus 編碼來取代 Vorbis。 </p></blockquote><h3 id="Opus"><a href="#Opus" class="headerlink" title="Opus"></a>Opus</h3><blockquote><p>Opus 是一個有損聲音編碼的格式，由 Xiph.Org 基金會開發，之後由網際網路工程任務組進行標準化，目標是希望用單一格式包含聲音和語音，取代 Speex 和 Vorbis，且適用於網路上低延遲的即時聲音傳輸，標準格式定義於 RFC 6716 文件。Opus 格式是一個開放格式，使用上沒有任何專利或限制。<br>Opus 整合了兩種聲音編碼的技術：以語音編碼為導向的 SILK 和低延遲的 CELT。Opus 可以无缝调节高低比特率。在编码器内部它在较低比特率时使用线性预测编码在高比特率时候使用变换编码（在高低比特率交界处也使用两者结合的编码方式）。Opus 具有非常低的演算法延遲（預設為 22.5 ms），非常適合用於低延遲語音通話的編碼，像是網路上的即時聲音串流、即時同步聲音旁白等等，此外 Opus 也可以透過降低編碼位元率，達成更低的演算法延遲，最低可以到 5 ms。在多個聽覺盲測中，Opus 都比 MP3、AAC、HE-AAC 等常見格式，有更低的延遲和更好的聲音壓縮率。 </p></blockquote><h2 id="Vorbis-与-Opus-的浏览器支持情况"><a href="#Vorbis-与-Opus-的浏览器支持情况" class="headerlink" title="Vorbis 与 Opus 的浏览器支持情况"></a>Vorbis 与 Opus 的浏览器支持情况</h2><p><img src="/images/pasted-5.png" alt="Vorbis"><br><img src="/images/pasted-6.jpg" alt="Opus"><br>音频编码 Opus 与 Vorbis 中，Safari 完全不支持 Vorbis 编码，支持 CAF 封装的 Opus 编码文件。<br>但 CAF(Core Audio Format) 是苹果的专有格式，其他浏览器并不支持。因此，想要在网页中使用 Opus 编码，需要同时准备两份文件，一份 CAF 封装，一份 Ogg 封装（.ogg 或者 .opus）。</p><h2 id="转换-Opus-格式"><a href="#转换-Opus-格式" class="headerlink" title="转换 Opus 格式"></a>转换 Opus 格式</h2><p>用 FFmpeg 可以很方便的转换 Opus 到 CAF：<br><code>FOR %%a IN (.\*.opus) DO (&quot;ffmpeg&quot; -i &quot;%%a&quot; -c:a copy &quot;%%a.caf&quot;)</code><br>保存成批处理可以将当前文件夹下的所有 Opus 文件生成一份 caf 封装的副本。 </p><h2 id="使用-Nginx-分流提供不同格式文件"><a href="#使用-Nginx-分流提供不同格式文件" class="headerlink" title="使用 Nginx 分流提供不同格式文件"></a>使用 Nginx 分流提供不同格式文件</h2><p>这样做的好处是不需要修改前端代码，代码中统一使用 Opus 或者 Ogg 格式，但 Nginx 会根据不同的浏览器返回不同文件。<br>利用 Nginx 的内置变量和 URL 重写功能，对请求的 UserAgent 进行判断，符合条件的请求会被重写。<br>因为 Nginx 不支持在一个条件中判断多个表达式和 if 语句的嵌套，只能利用自定义变量实现多条件判断。<br>对于 Safari 浏览器，如果接收的文件不是以 .caf 结尾，则必须正确指定 Content-Type 才能播放。<br>另外，对于这种改写方法，由于请求地址是一样的，必须要在 Cache-Control 中指定为 private，否则 CDN 可能缓存错误的文件，导致浏览器无法播放。</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>media<span class="token operator">/</span> <span class="token punctuation">{</span>    <span class="token keyword">root</span>   <span class="token operator">/</span>srv<span class="token operator">/</span>nginx<span class="token operator">/</span>hexo_media<span class="token operator">/</span><span class="token punctuation">;</span>    <span class="token keyword">add_header</span> Cache<span class="token operator">-</span>Control <span class="token string">"private, max-age=31536000"</span><span class="token punctuation">;</span>    <span class="token keyword">types</span> <span class="token punctuation">{</span>        audio<span class="token operator">/</span>x<span class="token operator">-</span>caf  caf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$http_user_agent</span> <span class="token operator">!</span><span class="token operator">~</span><span class="token operator">*</span> Chrome <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">"${flag}NotChrome"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$http_user_agent</span> <span class="token operator">~</span><span class="token operator">*</span> Safari <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">"${flag}IsSafari"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uri</span> <span class="token operator">~</span><span class="token operator">*</span> \<span class="token punctuation">.</span>opus$ <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">"${flag}Opus"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uri</span> <span class="token operator">~</span><span class="token operator">*</span> \<span class="token punctuation">.</span>ogg$ <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">"${flag}Ogg"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"NotChromeIsSafariOpus"</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">rewrite</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span>opus$ $<span class="token number">1</span><span class="token punctuation">.</span>opus<span class="token punctuation">.</span>caf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"NotChromeIsSafariOgg"</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">rewrite</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span>ogg$ $<span class="token number">1</span><span class="token punctuation">.</span>opus<span class="token punctuation">.</span>caf<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Admin </category>
          
          <category> 音视频编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Vorbis </tag>
            
            <tag> Opus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 1.18 with HTTP/3 编译记录</title>
      <link href="/2020/05/09/Nginx-1-18-compile/"/>
      <url>/2020/05/09/Nginx-1-18-compile/</url>
      
        <content type="html"><![CDATA[<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p><img src="/images/pasted-1.png" alt="Ubuntu 18.04"></p><h2 id="安装必要软件包"><a href="#安装必要软件包" class="headerlink" title="安装必要软件包"></a>安装必要软件包</h2><pre class=" language-sh"><code class="language-sh">apt install build-essential cmake golang cargo mmdb-bin libmaxminddb-dev libxml2 libxslt-dev libatomic-ops-dev libunwind-dev </code></pre><h2 id="拉取-Nginx-和相关模块源码"><a href="#拉取-Nginx-和相关模块源码" class="headerlink" title="拉取 Nginx 和相关模块源码"></a>拉取 Nginx 和相关模块源码</h2><pre class=" language-sh"><code class="language-sh">cd /rootwget https://nginx.org/download/nginx-1.18.0.tar.gzwget https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc5.tar.gzwget https://github.com/openresty/luajit2/archive/v2.1-20200102.tar.gzwget https://github.com/openresty/lua-resty-core/archive/v0.1.18rc4.tar.gzwget https://github.com/openresty/lua-resty-lrucache/archive/v0.10rc1.tar.gzgit clone --recursive https://github.com/cloudflare/quichegit clone https://github.com/kn007/patch.gitgit clone https://github.com/cloudflare/zlib.gitgit clone https://github.com/google/ngx_brotli.gitgit clone https://github.com/openresty/headers-more-nginx-module.gitgit clone https://github.com/vision5/ngx_devel_kit.gitgit clone https://github.com/leev/ngx_http_geoip2_module.gitgit clone https://github.com/aperezdc/ngx-fancyindex.gitgit clone https://github.com/arut/nginx-dav-ext-module.gitgit clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git</code></pre><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><pre class=" language-sh"><code class="language-sh">tar -xvf nginx-1.18.0.tar.gztar -xvf v0.10.16rc5.tar.gztar -xvf v2.1-20200102.tar.gztar -xvf v0.1.18rc4.tar.gztar -xvf v0.10rc1.tar.gz</code></pre><h2 id="编译-LUAJIT2"><a href="#编译-LUAJIT2" class="headerlink" title="编译 LUAJIT2"></a>编译 LUAJIT2</h2><pre class=" language-sh"><code class="language-sh">cd /root/luajit2-2.1-20200102make -j4export LUAJIT_INC=/root/luajit2-2.1-20200102/srcexport LUAJIT_LIB=/root/luajit2-2.1-20200102/srccd /root/lua-resty-lrucache-0.10rc1make -j4make installcd /root/lua-resty-core-0.1.18rc4make -j4make installln -s /usr/local/lib/lua /usr/local/share/lua/5.1</code></pre><h2 id="zlib-要清除之前的编译"><a href="#zlib-要清除之前的编译" class="headerlink" title="zlib 要清除之前的编译"></a>zlib 要清除之前的编译</h2><pre class=" language-sh"><code class="language-sh">cd /root/zlibmake -f Makefile.in distclean</code></pre><h2 id="编译-Nginx"><a href="#编译-Nginx" class="headerlink" title="编译 Nginx"></a>编译 Nginx</h2><p>先给 Nginx 打支持 HTTP/3 和 OCSP stapling 的补丁</p><pre class=" language-sh"><code class="language-sh">cd /root/nginx-1.18.0patch -p1 < ../patch/nginx_with_quic.patchpatch -p1 < ../patch/Enable_BoringSSL_OCSP.patch</code></pre><pre class=" language-sh"><code class="language-sh">cd /root/nginx-1.18.0./configure --add-module=../ngx_brotli --with-openssl=../quiche/deps/boringssl --with-quiche=../quiche --with-http_v2_module --with-http_v3_module --with-http_ssl_module --with-http_gzip_static_module --with-http_v2_hpack_enc --with-http_realip_module --with-threads --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-zlib=../zlib --add-module=../ngx_devel_kit --add-module=../headers-more-nginx-module --add-module=../lua-nginx-module-0.10.16rc5 --with-file-aio --add-module=../ngx_http_geoip2_module --add-module=../ngx-fancyindex --add-module=../nginx-dav-ext-module --add-module=../ngx_http_substitutions_filter_module --with-libatomic --with-http_dav_module --with-http_stub_status_modulemake -j4make install</code></pre><h2 id="添加-Nginx-到系统服务"><a href="#添加-Nginx-到系统服务" class="headerlink" title="添加 Nginx 到系统服务"></a>添加 Nginx 到系统服务</h2><pre class=" language-sh"><code class="language-sh">vim /lib/systemd/system/nginx.service</code></pre><p>添加以下内容</p><pre class=" language-ini"><code class="language-ini"># Stop dance for nginx<span class="token constant">#</span> <span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span></span>## ExecStop sends SIGSTOP (graceful stop) to the nginx process.# If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control# and sends SIGTERM (fast shutdown) to the main process.# After another 5s (TimeoutStopSec<span class="token attr-value"><span class="token punctuation">=</span>5), and if nginx is alive, systemd sends</span># SIGKILL to all the remaining processes in the process group (KillMode<span class="token attr-value"><span class="token punctuation">=</span>mixed).</span>## nginx signals reference doc:# http://nginx.org/en/docs/control.html#<span class="token selector">[Unit]</span><span class="token constant">Description</span><span class="token attr-value"><span class="token punctuation">=</span>A high performance web server and a reverse proxy server</span><span class="token constant">Documentation</span><span class="token attr-value"><span class="token punctuation">=</span>man:nginx(8)</span><span class="token constant">After</span><span class="token attr-value"><span class="token punctuation">=</span>network.target</span><span class="token selector">[Service]</span><span class="token constant">Type</span><span class="token attr-value"><span class="token punctuation">=</span>forking</span><span class="token constant">PIDFile</span><span class="token attr-value"><span class="token punctuation">=</span>/run/nginx.pid</span><span class="token constant">ExecStartPre</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local/nginx/sbin/nginx -t -q -c /etc/nginx/nginx.conf</span><span class="token constant">ExecStart</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local/nginx/sbin/nginx -c /etc/nginx/nginx.conf</span><span class="token constant">ExecReload</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local/nginx/sbin/nginx -s reload</span><span class="token constant">ExecStop</span><span class="token attr-value"><span class="token punctuation">=</span>-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid</span><span class="token constant">TimeoutStopSec</span><span class="token attr-value"><span class="token punctuation">=</span>5</span><span class="token constant">KillMode</span><span class="token attr-value"><span class="token punctuation">=</span>mixed</span><span class="token selector">[Install]</span><span class="token constant">WantedBy</span><span class="token attr-value"><span class="token punctuation">=</span>multi-user.target</span></code></pre><p>启用 Nginx 服务</p><pre class=" language-sh"><code class="language-sh">systemctl daemon-reloadsystemctl enable nginx</code></pre><h2 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h2><p>Nginx 配置文件在 <code>/etc/nginx</code><br>在配置文件中添加 HTTP/3 相关配置</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># Enable QUIC and HTTP/3.</span>    <span class="token keyword">listen</span> <span class="token number">443</span> quic reuseport<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Enable HTTP/2 (optional).</span>    <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span> http2<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate</span>      cert<span class="token punctuation">.</span>crt<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate_key</span>  cert<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Enable all TLS versions (TLSv1.3 is required for QUIC).</span>    <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span> TLSv1<span class="token number">.3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Request buffering in not currently supported for HTTP/3.</span>    proxy_request_buffering off<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Add Alt-Svc header to negotiate HTTP/3.</span>    <span class="token keyword">add_header</span> alt<span class="token operator">-</span>svc <span class="token string">'h3-27=":443"; ma=86400'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动 Nginx</p><pre class=" language-sh"><code class="language-sh">systemctl start nginx</code></pre><h2 id="测试-HTTP-3"><a href="#测试-HTTP-3" class="headerlink" title="测试 HTTP/3"></a>测试 HTTP/3</h2><p>安装 Firefox Nightly，在 <code>about:config</code> 中打开 <code>network.http.http3.enabled</code> 选项<br><img src="/images/pasted-2.png" alt="Firefox nightly"><br>安装 Google Chrome Canary，添加启动参数 <code>--enable-quic --quic-version=h3-27</code><br><img src="/images/pasted-3.png" alt="Chrome Canary"><br><a href="https://http3check.net/?host=azure.konata.tech" target="_blank" rel="noopener">HTTP/3 CHECK</a><br><img src="/images/pasted-4.png" alt="HTTP/3 CHECK"></p>]]></content>
      
      
      <categories>
          
          <category> Admin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动 IIS INETPUB 文件夹到其他分区</title>
      <link href="/2020/05/06/move-inetpub/"/>
      <url>/2020/05/06/move-inetpub/</url>
      
        <content type="html"><![CDATA[<h2 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h2><p><a href="https://social.technet.microsoft.com/Forums/de-DE/7df03b2f-44fa-4cd3-b8f4-5c5e573a1295/iis-85-whats-best-way-to-move-inetpub-directory-to-another-drive?forum=winserversetup" target="_blank" rel="noopener">Move IIS to another drive</a></p><h2 id="更改-PowerShell-执行脚本策略"><a href="#更改-PowerShell-执行脚本策略" class="headerlink" title="更改 PowerShell 执行脚本策略"></a>更改 PowerShell 执行脚本策略</h2><p>运行<code>Get-ExecutionPolicy</code>，查看当前执行策略：</p><ul><li><code>Restricted</code>——禁止执行脚本（Windows 默认）</li><li><code>RemoteSigned</code>——可以执行在本机上写的脚本或者远程下载的带签名的脚本（Windows Server 默认）</li><li><code>Unrestricted</code>——可以执行所有脚本</li></ul><p>允许执行所有脚本：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>ExecutionPolicy <span class="token operator">-</span>ExecutionPolicy Unrestricted</code></pre><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>脚本接受两个参数，第一个参数指定目标盘符，第二个参数 <code>-Force</code> 强制覆盖已存在的 inetpub 文件夹。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\Move_IIS<span class="token punctuation">.</span>ps1 D:</code></pre><h2 id="附脚本内容"><a href="#附脚本内容" class="headerlink" title="附脚本内容"></a>附脚本内容</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#// Get new drive letter from parameters</span><span class="token keyword">PARAM</span> <span class="token punctuation">(</span>    <span class="token namespace">[Parameter(Mandatory=$True)]</span>    <span class="token namespace">[string]</span><span class="token variable">$NewDrive</span><span class="token punctuation">,</span>    <span class="token namespace">[Parameter(Mandatory=$False)]</span>    <span class="token namespace">[switch]</span><span class="token variable">$Force</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#// Ensure the parameter is a sinlge character</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$NewDrive</span><span class="token punctuation">.</span>Length <span class="token operator">-ne</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$NewDrive</span> = <span class="token variable">$NewDrive</span><span class="token punctuation">.</span>Substring<span class="token punctuation">(</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#// Create variables</span><span class="token variable">$OldPath</span> = <span class="token string">"%SystemDrive%\inetpub"</span><span class="token variable">$NewPath</span> = <span class="token variable">$NewDrive</span><span class="token operator">+</span><span class="token string">":\inetpub"</span><span class="token comment" spellcheck="true">#// Check new drive actually exists</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token variable">$NewDrive</span><span class="token string">":\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Write-Host</span> <span class="token string">"ERROR:"</span><span class="token variable">$NewDrive</span><span class="token string">":\ drive does not exist, stopping"</span>    <span class="token keyword">Exit</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#// Test if already exists or Force param present</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$Force</span><span class="token punctuation">)</span> <span class="token operator">-And</span> <span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token variable">$NewPath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Write-Host</span> <span class="token string">"ERROR: <span class="token variable">$NewPath</span> already exists, halting move"</span>    <span class="token keyword">Exit</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#// Check IIS Installed</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Get<span class="token operator">-</span>WindowsFeature <span class="token operator">-</span>Name Web<span class="token operator">-</span>Server<span class="token punctuation">)</span><span class="token punctuation">.</span>InstallState <span class="token operator">-ne</span> <span class="token string">"Installed"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Write-Host</span> <span class="token string">"ERROR: IIS not installed, stopping"</span>    <span class="token keyword">Exit</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#// stop services</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Stopping IIS"</span><span class="token variable">$StopIIS</span> = &amp;iisreset <span class="token operator">/</span>stop<span class="token comment" spellcheck="true">#// move inetpub directory</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Moving inetpub directoy to <span class="token variable">$NewPath</span>"</span><span class="token variable">$MoveFiles</span> = &amp;Robocopy C:\inetpub <span class="token variable">$NewPath</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token operator">/</span><span class="token function">MOVE</span> <span class="token operator">/</span>S <span class="token operator">/</span>E <span class="token operator">/</span>COPYALL <span class="token operator">/</span>R:0 <span class="token operator">/</span>W:0<span class="token comment" spellcheck="true">#// Add file C:\inetpub\Moved_to_Disk_$NewDrive</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Adding movedto file"</span><span class="token variable">$NewDir</span> = <span class="token function">New-Item</span> <span class="token string">"C:\inetpub"</span> <span class="token operator">-</span><span class="token function">type</span> directory<span class="token variable">$NewFile</span> = <span class="token function">Out-File</span> C:\inetpub\Moved_to_Disk_<span class="token variable">$NewDrive</span><span class="token comment" spellcheck="true">#// modify reg</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Updating Registry"</span><span class="token variable">$RegUpdate</span> = <span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\SOFTWARE\Microsoft\InetStp"</span> <span class="token operator">-</span>Name <span class="token string">"PathWWWRoot"</span> <span class="token operator">-</span>Value <span class="token variable">$NewPath</span><span class="token string">"\wwwroot"</span> <span class="token operator">-</span>PropertyType ExpandString <span class="token operator">-</span>Force<span class="token variable">$RegUpdate</span> = <span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\System\CurrentControlSet\Services\WAS\Parameters"</span> <span class="token operator">-</span>Name <span class="token string">"ConfigIsolationPath"</span> <span class="token operator">-</span>Value <span class="token variable">$NewPath</span><span class="token string">"\temp\appPools"</span> <span class="token operator">-</span>PropertyType String <span class="token operator">-</span>Force<span class="token variable">$RegUpdate</span> = <span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\SOFTWARE\Wow6432Node\Microsoft\InetStp"</span> <span class="token operator">-</span>Name <span class="token string">"PathWWWRoot"</span> <span class="token operator">-</span>Value <span class="token variable">$NewPath</span><span class="token string">"\wwwroot"</span> <span class="token operator">-</span>PropertyType ExpandString <span class="token operator">-</span>Force<span class="token comment" spellcheck="true">#// Backup and modify applicationHost.config file</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Backing up config file"</span><span class="token function">copy-item</span> C:\Windows\System32\inetsrv\config\applicationHost<span class="token punctuation">.</span>config C:\Windows\System32\inetsrv\config\applicationHost<span class="token punctuation">.</span>config<span class="token punctuation">.</span>bak<span class="token function">Start-Sleep</span> 5<span class="token comment" spellcheck="true">#// Replace "%SystemDrive%\inetpub" with $NewDrive":\inetpub"</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Updating config file"</span><span class="token punctuation">(</span><span class="token function">Get-Content</span> C:\Windows\System32\inetsrv\config\applicationHost<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"<span class="token variable">$OldPath</span>"</span><span class="token punctuation">,</span><span class="token string">"<span class="token variable">$NewPath</span>"</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Set-Content</span> C:\Windows\System32\inetsrv\config\applicationHost<span class="token punctuation">.</span>config<span class="token comment" spellcheck="true">#// Update IIS Config</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Updating appcmd config"</span><span class="token variable">$UpdateConfig</span> = &amp;C:\Windows\system32\inetsrv\appcmd <span class="token function">set</span> config <span class="token operator">-</span>section:system<span class="token punctuation">.</span>applicationhost<span class="token operator">/</span>configHistory <span class="token operator">-</span>path:<span class="token variable">$NewPath</span>\history<span class="token comment" spellcheck="true">#// Start services</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Starting IIS"</span><span class="token variable">$StartIIS</span> = &amp;iisreset <span class="token operator">/</span><span class="token function">start</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Completed"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Admin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2020/05/03/Promise/"/>
      <url>/2020/05/03/Promise/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise-的三种状态"><a href="#Promise-的三种状态" class="headerlink" title="Promise 的三种状态"></a>Promise 的三种状态</h2><ul><li>Pending</li><li>Fullfilled</li><li>Rejected</li></ul><p>Promise 的状态一旦从 Pending 变为 Fullfilled 或 Rejected，就不会再发生改变。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="创建-Promise"><a href="#创建-Promise" class="headerlink" title="创建 Promise"></a>创建 Promise</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* 异步操作成功 */</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将结果传出</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将错误传出</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h3><p>then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 Resolved 时调用，第二个回调函数是 Promise 对象的状态变为 Rejected 时调用，第二个函数是可选的。这两个函数都接受 Promise 对象传出的值作为参数。Promise 新建后会立即执行，then 方法指定的回调函数将在当前脚本所有同步任务执行完成后才会执行。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> <span class="token string">'done'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 Promise 实现 AJAX</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> getJSON <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> handler<span class="token punctuation">;</span>    client<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"/post.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Contents: '</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ERROR'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>then 方法可以链式调用，前一个回调函数完成之后，会将返回结果作为参数传入下一个回调函数。</p><pre class=" language-js"><code class="language-js"><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"/post/1.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  post <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getJSON</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>commentURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  comments <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Resolved: "</span><span class="token punctuation">,</span> comments<span class="token punctuation">)</span><span class="token punctuation">,</span>  err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Rejected: "</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch 方法"></a>catch 方法</h3><p>catch 方法是 then(null, rejection) 的别名，用于指定发生错误时的回调函数。建议不要在 then 方法中使用 Rejected 参数，推荐总是使用 catch 方法。如果没有 catch 方法指定错误处理的函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。</p><h3 id="all-方法"><a href="#all-方法" class="headerlink" title="all 方法"></a>all 方法</h3><p>all 方法用于将多个 Promise 实例包装成一个新的 Promise 实例。<br><code>var p = Promise.all([p1, p2, p3]);</code><br>上面的代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例；如果不是，会先调用 Promise.resolve 方法，将参数转为 Promise 实例，再继续处理（Promise.all 方法的参数不一定是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例）。<br>p 的状态由 p1、p2、p3 决定，分为两种情况：</p><ol><li>只有 p1、p2、p3 的状态都变成 Fullfilled，p 的状态才会变成 Fullfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</li><li>只要 p1、p2、p3 中有一个被 Rejected，p 的状态就变成 Rejected，此时第一个被 Rejected 的实例的返回值会传递给 p 的回调函数。</li></ol><blockquote><p>如果作为参数的 Promise 实例自身定义了 catch 方法，那么他被 rejected 时并不会触发 Promise.all() 的 catch 方法。</p></blockquote><h3 id="race-方法"><a href="#race-方法" class="headerlink" title="race 方法"></a>race 方法</h3><p>race 方法同样是将多个 Promise 实例包装成一个新的 Promise 实例。但 p1、p2、p3 中有一个实例率先改变状态，p 的状态就会改变。那个最先改变的 Promise 实例的返回值就传递给 p 的回调函数。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//如果 5 秒钟内 fetch 没有返回结果，p 将变为 Rejected，触发 catch 方法</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'request timeout'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="resolve-方法"><a href="#resolve-方法" class="headerlink" title="resolve 方法"></a>resolve 方法</h3><p>resolve 方法可以将现有对象转为 Promise 对象。分为四种情况：</p><ul><li><p><strong>参数是一个 Promise 实例</strong><br>会直接返回这个实例。</p></li><li><p><strong>参数是一个 thenable 对象</strong><br>指具有 then 方法的对象：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> thenable <span class="token operator">=</span> <span class="token punctuation">{</span>    then<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>resolve 方法会将这个对象转为 Promise 对象，然后立即执行 thenable 对象的 then 方法。</p></li><li><p><strong>参数不是 thenable 对象或不是对象</strong><br>resolve 方法返回一个新的 Promise 对象，状态为 Resolved。resolve 方法的参数会传给回调函数并立即执行。</p></li><li><p><strong>不带有任何参数</strong><br>直接返回一个 Resolve 状态的 Promise 对象。  </p><blockquote><p>立即 resolve 的 Promise 对象是在本轮“事件循环“（event loop）结束时，而不是再下一轮”事件循环“开始时。</p></blockquote><pre class=" language-js"><code class="language-js">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// one</span>  <span class="token comment" spellcheck="true">// two</span>  <span class="token comment" spellcheck="true">// three</span></code></pre><p>  其中：<br>  <code>console.log(&#39;one&#39;)</code> 立即执行；<br>  <code>Promise.resolve()</code> 在本轮”事件循环“结束时执行；<br>  <code>setTimeout(fn, 0)</code> 在下一轮”事件循环“开始时执行。</p></li></ul><h3 id="reject-方法"><a href="#reject-方法" class="headerlink" title="reject 方法"></a>reject 方法</h3><p>reject 方法也会返回一个新的 Promise 实例，状态为 Rejected，reject 方法的参数会原封不动地作为 reject 的理由变成后续方法的参数，回调函数会立即执行。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> thenable <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'ERROR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>thenable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token operator">===</span> thenable<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// Promise.reject 方法的参数是一个 thenable 对象，执行以后，后面 catch 方法的参数不是 reject 抛出的”ERROR“字符串，而是 thenable 对象。</span></code></pre><h3 id="finally-方法"><a href="#finally-方法" class="headerlink" title="finally 方法"></a>finally 方法</h3><p>finally 方法用于指定 Promise 对象最后状态如何都会执行的操作，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>让同步函数同步执行，异步函数异步执行，有两种方法。<br>第一种写法，使用 <code>async</code> 函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// now</span><span class="token comment" spellcheck="true">// next</span></code></pre><p>上面的代码中，第二行是一个立即执行的匿名函数，会立即执行里面的 <code>async</code> 函数，因此如果 <code>f</code> 是同步的，就会得到同步的结果；如果 <code>f</code> 是异步的，就可以用 <code>then</code> 指定下一步，需要注意，<code>async() =&gt; f()</code> 会吃掉 <code>f()</code> 抛出的错误，捕获错误需要使用 <code>promise.catch</code> 方法。写法如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre><p>第二种写法，使用<code>new Promise()</code>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>    resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// now</span><span class="token comment" spellcheck="true">// next</span></code></pre><p>上面的代码也是用立即执行的匿名函数来执行 <code>new Promise()</code> 的。这种情况下，同步函数也是同步执行的。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AV1 编码测试视频</title>
      <link href="/2020/04/28/Misaka-Dances/"/>
      <url>/2020/04/28/Misaka-Dances/</url>
      
        <content type="html"><![CDATA[<h3 id="AV1-8bit"><a href="#AV1-8bit" class="headerlink" title="AV1 8bit"></a>AV1 8bit</h3><pre class=" language-sh"><code class="language-sh">.\aomenc.exe --webm -w 1920 -h 1440 --fps=30/1 --cpu-used=4 --bit-depth=8 --color-primaries=bt709 --end-usage=cq --target-bitrate=1000 --passes=2 --pass=2 --fpf=8b.log -o 8b.webm y4m.y4m</code></pre><video controls width="100%">    <source src="/media/AV1_8bit_HEAAC.mp4" type="video/webm"></video><hr><h3 id="AV1-10bit"><a href="#AV1-10bit" class="headerlink" title="AV1 10bit"></a>AV1 10bit</h3><p>1230V3 严重卡顿，8750H 卡顿，A12X 轻微卡顿，画质相比 8bit 提升极小</p><pre class=" language-sh"><code class="language-sh">.\aomenc.exe --webm -w 1920 -h 1440 --fps=30/1 --cpu-used=4 --bit-depth=10 --color-primaries=bt709 --end-usage=cq --target-bitrate=1000 --passes=2 --pass=2 --fpf=10b.log -o 10b.webm y4m.y4m</code></pre><video controls width="100%">    <source src="/media/AV1_10bit_HEAAC.mp4" type="video/webm"></video><hr><h3 id="AV1-12bit"><a href="#AV1-12bit" class="headerlink" title="AV1 12bit"></a>AV1 12bit</h3><pre class=" language-sh"><code class="language-sh">.\aomenc.exe --webm -w 1920 -h 1440 --fps=30/1 --cpu-used=1 --bit-depth=12 --color-primaries=bt709 --end-usage=cq --target-bitrate=1000 --passes=2 --pass=2 --fpf=12b.log -o 12b.webm y4m.y4m</code></pre><p>解码压力更大且有马赛克，画质相比 10bit 提升极小<br><video controls width="100%"><br>    <source src="/media/AV1_12bit_HEAAC.mp4" type="video/webm"><br></video></p>]]></content>
      
      
      <categories>
          
          <category> 音视频编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AV1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VapourSynth 输出无损视频</title>
      <link href="/2020/04/27/codec/"/>
      <url>/2020/04/27/codec/</url>
      
        <content type="html"><![CDATA[<h3 id="VapourSynth-输出-YUV4MPEG"><a href="#VapourSynth-输出-YUV4MPEG" class="headerlink" title="VapourSynth 输出 YUV4MPEG"></a>VapourSynth 输出 YUV4MPEG</h3><p><code>vspipe -y -p script.vpy out.y4m</code></p><h3 id="VapourSynth-输出-HuffYUV"><a href="#VapourSynth-输出-HuffYUV" class="headerlink" title="VapourSynth 输出 HuffYUV"></a>VapourSynth 输出 HuffYUV</h3><p><code>vspipe -y -p script.vpy - | ffmpeg -i pipe: -r 24 -c:v huffyuv out.avi</code></p>]]></content>
      
      
      <categories>
          
          <category> 音视频编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AV1 </tag>
            
            <tag> VapoVurSynth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp-note</title>
      <link href="/2020/04/09/jsp-note/"/>
      <url>/2020/04/09/jsp-note/</url>
      
        <content type="html"><![CDATA[<h3 id="java强化"><a href="#java强化" class="headerlink" title="java强化"></a>java强化</h3><ul><li>获取Class对象的方式：<ol><li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li>类名.class：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li>对象.getClass()：getClass()方法在Object类中定义着。<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol><ul><li>结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li></ul></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><ul><li>软件架构<ol><li>C/S：客户端/服务器端</li><li>B/S：浏览器/服务器端</li></ol></li><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户的请求，处理请求，做出响应</li><li>web服务器软件：接收用户的请求，处理请求，做出响应。</li><li>Servlet：运行在服务器端的小程序<ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li><li>将来我们自定义一个类，实现Servlet接口，复写方法。</li></ul></li></ul><ol><li><p>将HelloServlet.java使用tomcat容器进行部署，并通过浏览器进行访问  </p><ul><li>从HelloServlet.java –&gt; HelloServlet.class  </li><li>javac -classpath servlet-api.jar HelloServlet.java  </li><li>注意：(classpath环境变量 至少配置为.)<br>servlet-api.jar 要与HelloServlet.java在相同目录。</li></ul></li><li><p>按照tomcat容器对web项目的要求来建立web工程</p><ul><li>所有的web工程都放在webapps这个目录下<br> webapps下的每一个文件夹都是一个web工程</li><li>web工程要符合什么结构？  <ul><li>program(工程名)<ul><li>WEB-INF</li><li>classes文件夹 （编译后的class文件-HelloServlet.class）</li><li>lib （所有的依赖jar文件）</li><li>web.xml</li></ul></li><li>web页面需要的目录  </li></ul></li></ul></li><li><p>部署、配置HelloServlet.class  </p><ul><li><p>将class文件放在 工程/WEB-INF/classes/</p></li><li><p>在web.xml中配置映射关系</p></li><li><p>相对路径<br>相对路径就是相对于某一个文件夹的路径<br>HelloServlet相对于webapps目录的相对路径为（相当于把webapps看做根目录”/“）<br>\testServlet\WEB-INF\classes\HelloServlet.class</p></li><li><p>绝对路径<br>是指的文件的存储物理位置<br>D:\apache-tomcat-7.0.67\apache-tomcat-7.0.67\webapps\testServlet\WEB-INF\classes\HelloServlet.class</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置刚才编译好的serlvet的class文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 给这个servlet节点起名，随便起 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置class的全名： 包名.类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置在浏览器中输入的地址（url） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 与servlet标签中的servlet-name标签 配置相同 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  配置的是从浏览器地址栏中要输入的地址(相对路径) 你想在浏览器敲什么路径来访问，就怎么写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>通过浏览器访问HelloServlet.class</p><ul><li>运行tomcat容器</li><li>输入<a href="http://localhost:8080/项目名/url-pattern" target="_blank" rel="noopener">http://localhost:8080/项目名/url-pattern</a></li></ul></li></ol><ol start="5"><li><p>eclipse常用操作</p><ul><li>创建工程<br>file -&gt; new -&gt; project -&gt; Dynamic Web project<br>next  创建工程名 （Servlet_Jsp）<br>next -&gt; Content dir —-&gt; WebRoot<br>勾选 创建默认web.xml 工程在创建时会自动创建一个web.xml文件。</li></ul></li><li><p>页面 -&gt; servlet程序<br>参数传递的方式 : </p><ol><li><p>url -&gt;  get</p></li><li><p>form -&gt;<br>method = get -&gt; get -&gt; doGet<br>method = post -&gt; post -&gt; doPost</p></li><li><p>接受页面传递到servlet中的参数:<br>HttpServletRequest </p></li></ol></li></ol><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// request对象： 封装的从页面传递到servlet程序的各种信息，其中包含参数</span>  <span class="token comment" spellcheck="true">// http://localhost:8080/jsp_18/lifeCycleServlet?name1=value1&amp;name2=value2</span>  <span class="token comment" spellcheck="true">// 1. request.getParameter(String param_name);  通过param_name字符串去匹配参数的name属性， 从而获取参数的value</span>  String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  String password1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  String password2 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  String email <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 注意：使用request.getParameter() 无法正常的获取复选框的值</span>  <span class="token comment" spellcheck="true">// String hobby = request.getParameter("hobby"); // 错误</span>  <span class="token comment" spellcheck="true">// System.out.println("bobby = " + hobby);       // 错误</span>  <span class="token comment" spellcheck="true">// request.getParameterValues(String param_name); 通过name属性获取特定的组件value属性</span>  String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobby <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" username = "</span> <span class="token operator">+</span> username <span class="token operator">+</span>     <span class="token string">"; password1 = "</span> <span class="token operator">+</span> password1 <span class="token operator">+</span>    <span class="token string">"; password2 = "</span> <span class="token operator">+</span> password2 <span class="token operator">+</span>    <span class="token string">"; email = "</span> <span class="token operator">+</span> email    <span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// request.getParameterMap(); 获取页面参数，并且封装到map对象中</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> pMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 对map遍历</span>  <span class="token comment" spellcheck="true">// ctrl + 1</span>  Iterator<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span> it <span class="token operator">=</span> pMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取value数组，根据业务需求，决定应该如何处理数组中的数据</span>   <span class="token comment" spellcheck="true">//if("hobby".equals(key)){</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String v <span class="token operator">:</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">";value = "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// request.getParameterNames(); 获取键值对，name的集合</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   String name <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ol start="3"><li><p>servlet向页面响应<br>HttpServletResponse</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置页面的输出格式 （保证浏览器可以正常的显式中文）</span><span class="token comment" spellcheck="true">// text/html : 可以向页面输出文本、html标签</span><span class="token comment" spellcheck="true">// charset  :  输出文本、标签的格式为UTF-8（涵盖全部主流国家的文字的码值）</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取response中对页面的输出流</span>PrintWriter out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><ul><li><p>执行原理：</p><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</url-pattern></li><li>如果有，则在找到对应的<servlet-class>全类名</servlet-class></li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li><li><p>Servlet中的生命周期方法：</p><ol><li>被创建：执行init方法，只执行一次</li></ol><ul><li>Servlet什么时候被创建？<ul><li>默认情况下，第一次被访问时，Servlet被创建</li><li>可以配置执行Servlet的创建时机。<ul><li>在<code>&lt;servlet&gt;</code>标签下配置<ol><li>第一次被访问时，创建  <code>&lt;load-on-startup&gt;</code>的值为负数</li><li>在服务器启动时，创建  <code>&lt;load-on-startup&gt;</code>的值为0或正整数</li></ol></li></ul></li></ul></li><li>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的<ul><li>多个用户同时访问时，可能存在线程安全问题。</li><li>解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</li></ul></li></ul><ol start="2"><li>提供服务：执行service方法，执行多次<ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul></li><li>被销毁：执行destroy方法，只执行一次<ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul></li></ol></li></ul><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><ol><li><p>概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</p></li><li><p>快速入门：</p><ul><li>步骤：</li></ul><ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下</li><li>右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><ul><li>代码实现：<pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//1. 导入驱动jar包</span>   <span class="token comment" spellcheck="true">//2.注册驱动</span>   Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//3.获取数据库连接对象</span>   Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//4.定义sql语句</span>   String sql <span class="token operator">=</span> <span class="token string">"select ..."</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//5.获取执行sql的对象 Statement</span>   Statement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//6.执行sql</span>   <span class="token keyword">int</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeSelect</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//7.处理结果</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//8.释放资源</span>   stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>管理事务：</p><ol><li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</li><li>操作：</li><li>开启事务</li><li>提交事务</li><li>回滚事务</li><li>使用Connection对象来管理事务</li></ol><ul><li>开启事务：<code>setAutoCommit(boolean autoCommit)</code>调用该方法设置参数为false，即开启事务</li><li>在执行sql之前开启事务</li><li>提交事务：<code>commit()</code></li><li>当所有sql都执行完提交事务</li><li>回滚事务：<code>rollback()</code> </li><li>在catch中回滚事务</li></ul></li><li><p>ResultSet：结果集对象,封装查询结果</p><ul><li><p><code>boolean next()</code> 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</p></li><li><p><code>getXxx(参数)</code>:获取数据</p></li><li><p>Xxx：代表数据类型   如： <code>int getInt()</code> , <code>String getString()</code></p></li><li><p>参数：</p><ol><li>int：代表列的编号,从1开始   如： <code>getString(1)</code></li><li>String：代表列名称。 如： <code>getDouble(&quot;balance&quot;)</code></li></ol></li><li><p>注意：</p></li><li><p>使用步骤：</p><ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据</li></ol></li></ul><ol start="5"><li>PreparedStatement：执行sql的对象</li><li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</li><li>解决sql注入问题：使用PreparedStatement对象来解决</li><li>预编译的SQL：参数使用?作为占位符</li><li>注意：sql的参数使用？作为占位符。 如：<code>select - from user where username = ? and password = ?</code>;</li><li>获取执行sql语句的对象 <code>PreparedStatement  Connection.prepareStatement(String sql)</code> </li><li>给？赋值：</li></ol><ul><li>方法： <code>setXxx(参数1,参数2)</code><ul><li>参数1：？的位置编号 从1 开始</li><li>参数2：？的值</li></ul></li></ul><ol start="7"><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol><ul><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ul></li></ol><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ol><li>请求转发和重定向<br>目的： 实现页面或者servlet跳转<br>页面跳转的方式汇总：</li></ol><ul><li><p>前台的跳转</p><ol><li><code>&lt;a href=&quot;url&quot; &gt;forward&lt;/a&gt;</code></li><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>..<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li><code>window.location.href=&quot;url&quot;;</code></li><li>ajax 跳转</li></ol></li><li><p>后台跳转</p><ol><li>请求转发 : 指的是从后台Servlet发起，跳转到其他的Servlet或者Jsp<br>在servlet中 将请求交给其他的servlet或者是跳转到页面。   </li></ol><ul><li>转发给Servlet<br>request.getRequestDispatcher(“overServlet”).forward(request, response);  </li><li>跳转页面<br>request.getRequestDispatcher(“over.jsp”).forward(request, response);</li></ul></li></ul><ol start="2"><li>重定向<br>在servlet中 将请求交给其他的servlet或者是跳转到页面。<ul><li>重定向到Servlet<br>response.sendRedirect(request.getServletContext().getContextPath() + “/forward/overServlet” );</li><li>重定向到页面<br>response.sendRedirect(request.getServletContext().getContextPath() + “/forward/over.jsp”);</li></ul></li></ol><h4 id="请求转发和重定向的区别"><a href="#请求转发和重定向的区别" class="headerlink" title="请求转发和重定向的区别"></a>请求转发和重定向的区别</h4><ol><li>请求转发使用的是request对象，重定向使用的是response对象。</li><li>请求转发的url不会发生改变，重定向时的url会发生改变。</li><li>请求转发只请求一次服务器（服务器内部跳转），重定向请求多次服务器（服务器外部跳转）</li><li>请求转发的执行效率要高于重定向</li><li>请求转发可以使用 request、session、application域<br>重定向只能使用session、application。</li></ol><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li><p>Cookie<br>存储在浏览器端的文本文件，是由服务器端向浏览器端写的一个纯文本文件（键和值都为字符串）。我们可以通过设置Cookie<br>的生命周期来决定Cookie的存储方式，如果不设置的话，是存储在浏览器的运行内存中。</p></li><li><p>Cookie的使用</p><ol><li>存储Cookie<pre class=" language-java"><code class="language-java">Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个Cookie对象,在服务器端的运行内存中。</span>可选的：cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果添加这句话，将Cookie保存在文本文件中。</span>      如果不添加，将Cookie存储在客户端浏览器的运行内存中。response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用响应对象将创建好的Cookie写入到浏览器端。</span></code></pre></li><li>获取Cookie<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过request对象获取Cookie键值对的集合，其中每一个键值对就是一个Cookie对象</span>Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根据自己的业务需要，编写到底如何去获取Cookie。</span></code></pre><ol><li>不一定获取每一个Cookie键值对<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Cookie cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>String name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取Cookie键值对的键 ,[例] key1=value1 中的key1</span>String value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取Cookie键值对中的值 ,[例] key1=value1 中的value1</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>一定获取每一个Cookie键值对.<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>String name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//[注意] 如何获取Cookies中某一个特定的键值对. 比如 ： 获取value2</span><span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>String name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ul><li>Cookie 举例<br>key1=value1   -&gt; Cookie对象<br>key2=value2   -&gt; Cookie对象<br>key3=value3   -&gt; Cookie对象  </li></ul></li></ol></li><li><p>Session对象：<br>Session对象是指的客户端浏览器与服务器之间的一段会话（包含若干个请求和响应）,Session是存储在服务器内存中的对象。<br>Session是通过JSessionID确保浏览器只能获取自己的Session。<br>每一个客户端浏览器访问服务器端程序时，在自己浏览器端的本地的Cookie文件中保存属于这个浏览器的JSessionId，同时在服务器端的程序中也会这个JSessionId保存到内存中。就可以确保Session的正确获取。<br>一般来讲Session是依赖于Cookie的，如果某些浏览器禁用了Cookie，Session是无法正常使用的。可以使用URL重写的方式。将SessionID通过URL进行传递。<br>Session 也是一个名值对对象，key-&gt;String; value-&gt;Object</p><ul><li>用法： </li></ul><p>1.向Session中的存储数据</p><pre class=" language-java"><code class="language-java">HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过request对象来获取Session对象</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span>ArrayList<span class="token punctuation">[</span>Array<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Map<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key一定为String类型</span>                  <span class="token comment" spellcheck="true">// value为任意类型</span></code></pre><p>2.通过Session获取数据</p><pre class=" language-java"><code class="language-java">HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List list <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayList<span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过某一个Key 获取对应的对象。</span>              对象获取以后类型为Object，如果要使用这个对象，则需要类型转换</code></pre><p>3.如果客户端浏览器禁用Cookie，如何url传递SessionID（URL重写）<br>在JSP代码中：</p><pre><code>&lt;form action= &quot;&lt;%response.encodeURL(&quot;%&gt;hello.do&lt;%&quot;)%&gt;&quot; method=&quot;post&quot;&gt;&lt;/form&gt;在Servlet代码中(拼接字符串)：StringBuffer html = new StringBuffer(&quot;&quot;);.....html.append(&quot;&lt;form action=\&quot;&quot; + response.encodeURL(&quot;hello.do&quot;) + &quot;\&quot; method=\&quot;post\&quot;&gt;&quot;);</code></pre></li></ul><h4 id="this与super"><a href="#this与super" class="headerlink" title="this与super"></a>this与super</h4><ul><li>存在方法重写的时候<br>this指的是本类对象中的属性和方法.<br>super指的是本类的父类对象中的属性和方法.</li><li>不存在方法重写，方法只存在于父类中<br>this与super都是指的父类中的属性和方法.</li></ul><h3 id="JSP入门"><a href="#JSP入门" class="headerlink" title="JSP入门"></a>JSP入门</h3><ol><li><p>概念：</p><ul><li>Java Server Pages： java服务器端页面</li><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li></ul></li><li><p>原理</p><ul><li>JSP本质上就是一个Servlet</li></ul></li><li><p>JSP的脚本：JSP定义Java代码的方式</p><ol><li><code>&lt;%  代码 %&gt;</code>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li><li><code>&lt;%! 代码 %&gt;</code>：定义的java代码，在jsp转换后的java类的成员位置。</li><li><code>&lt;%= 代码 %&gt;</code>：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li></ol></li><li><p>JSP的内置对象：</p><ul><li>在jsp页面中不需要创建，直接使用的对象</li><li>一共有9个：<ul><li>变量名     真实类型      作用</li><li>pageContext    PageContext     当前页面共享数据，还可以获取其他八个内置对象</li><li>request     HttpServletRequest   一次请求访问的多个资源(转发)</li><li>session     HttpSession     一次会话的多个请求间</li><li>application    ServletContext    所有用户间共享数据</li><li>response     HttpServletResponse   响应对象</li><li>page      Object      当前页面(Servlet)的对象  this</li><li>out      JspWriter     输出对象，数据输出到页面上</li><li>config     ServletConfig    Servlet的配置对象</li><li>exception     Throwable     异常对象</li></ul></li></ul></li><li><p>指令</p><ul><li>作用：用于配置JSP页面，导入资源文件</li><li>格式：<br><code>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;</code></li><li>分类：  </li></ul><ol><li><p>page  ： 配置JSP页面的</p><ul><li>contentType：等同于response.setContentType()<ol><li>设置响应体的mime类型以及字符集</li><li>设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</li></ol></li><li>import：导包</li><li>errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</li><li>isErrorPage：标识当前也是是否是错误页面。<ul><li>true：是，可以使用内置对象exception</li><li>false：否。默认值。不可以使用内置对象exception</li></ul></li></ul></li><li><p>include ： 页面包含的。导入页面的资源文件</p><ul><li><code>&lt;%@include file=&quot;top.jsp&quot;%&gt;</code></li></ul></li><li><p>taglib ： 导入资源</p><ul><li><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></li><li>prefix：前缀，自定义的</li></ul></li></ol></li><li><p>注释:</p><ol><li>html注释：<!-- -->:只能注释html代码片段</li><li>jsp注释：推荐使用<br>&lt;%– –%&gt;：可以注释所有</li></ol></li></ol><h3 id="EL技术"><a href="#EL技术" class="headerlink" title="EL技术"></a>EL技术</h3><ol><li>EL 表达式概述  </li></ol><ul><li>EL（Express Lanuage）表达式可以嵌入在jsp页面内部，减少jsp脚本的编写，EL 出现的目的是要替代jsp页面中脚本的编写。</li><li>EL表达式语言可以简化对变量的对象的访问。</li><li>JSP EL表达式用于以下情形<ol><li>静态文本</li><li>标准标签和自定义标签（jsp）</li><li>EL不能在脚本元素（&lt;% %&gt;）中使用</li></ol></li><li>语法: <code>${EL Expression}</code> 所有表达式以${开始 以}结束。<br>使用  <code>.</code>  或者 <code>[ ]</code>  获取数据</li></ul><ol start="2"><li>EL从域中取出数据(EL最重要的作用)<br>jsp脚本：<code>&lt;%=request.getAttribute(name)%&gt;</code><br>EL表达式替代上面的脚本：<code>${requestScope.name}</code></li></ol><ul><li>EL最主要的作用是获得四大域中的数据，格式${EL表达式}</li><li>EL获得pageContext域中的值：<code>${pageScope.key};</code></li><li>EL获得request域中的值：<code>${requestScope.key};</code></li><li>EL获得session域中的值：<code>${sessionScope.key};</code></li><li>EL获得application域中的值：<code>${applicationScope.key};</code></li><li>EL从四个域中获得某个值<code>${key};</code><br>同样是依次从pageContext域，request域，session域，application域中 获取属性，在某个域中获取后将不在向后寻找<br>1）获得普通字符串<br>2）获得User对象的值<br>3）获得List<user>的值  </user></li></ul><ol start="3"><li><p>EL的内置对象11个<br><code>pageScope,requestScope,sessionScope,applicationScope</code>-获取JSP中域中的数据<br><code>param.name,paramValues</code>  -接收参数 相当于<br><code>request.getParameter(&quot;name&quot;)    request.getParameterValues()</code><br><code>header,headerValues</code>  -获取请求头信息 相当于<code>request.getHeader(name)</code><br><code>initParam</code>    -获取全局初始化参数 相当于<code>this.getServletContext().getInitParameter(name)</code><br><code>cookie</code>      -WEB开发中cookie<br><code>${cookie.cookiekey.name}</code>获取键 ，<br><code>${cookie.cookiekey.value}</code>获取值<br><code>pageContext</code>   -WEB开发中的pageContext.<br><code>pageContext</code> -获得其他八大对象<br><code>${pageContext.request.contextPath}</code>  -获得WEB应用的名称</p></li><li><p>EL执行表达式<br>例如：<br><code>${1+1}</code><br><code>${empty user}</code><br><code>${user==null?true:false}</code></p></li></ol><h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3><ol><li><p>概念：JavaServer Pages Tag Library  JSP标准标签库</p></li><li><p>作用：用于简化和替换jsp页面上的java代码  </p></li><li><p>使用步骤：</p><ol><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：  <code>&lt;%@ taglib %&gt;</code></li><li>使用标签</li></ol></li><li><p>常用的JSTL标签</p><ol><li>if:相当于java代码的if语句<ol><li>属性：<br>test 必须属性，接受boolean表达式<ul><li>如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</li><li>一般情况下，test属性值会结合el表达式一起使用</li></ul></li><li>注意：<ul><li>c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签</li></ul></li></ol></li><li>choose:相当于java代码的switch语句<ol><li>使用choose标签声明            相当于switch声明</li><li>使用when标签做判断            相当于case</li><li>使用otherwise标签做其他情况的声明     相当于default</li></ol></li><li>foreach:相当于java代码的for语句</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>To Do List</title>
      <link href="/2020/04/04/To-Do/"/>
      <url>/2020/04/04/To-Do/</url>
      
        <content type="html"><![CDATA[<h4 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h4><ul><li><input disabled type="checkbox"> H5控制开关机</li><li><input disabled type="checkbox"> 角色权限管理</li><li><input disabled type="checkbox"> 扫码提交工单</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> TODO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2020/03/16/dp/"/>
      <url>/2020/03/16/dp/</url>
      
        <content type="html"><![CDATA[<p><strong>神奇口袋问题</strong><br>有一个神奇的口袋总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。<br><strong>DP(动态规划)思路：</strong><br>k种物品凑成体积w的方法：k-1种物品凑成体积w 的方法数加上 k-1种物品凑成w-a[k]体积+k物品a[k]这一种方法<br><code>Ways[w][k] = Ways[w][k] + Ways[w - a[k]][k - 1];</code></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> Ways<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Ways[i][j]表示从前j种物品里凑出体积i的方法数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>Ways<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Ways<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组初始化值为0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入当前第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个商品的体积："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入第i个商品的体积</span>        Ways<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界条件 任意i个物品凑体积0的方法都是一种：选0个物品 </span>    <span class="token punctuation">}</span>    Ways<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//边界条件 0个物品凑0体积方法只有一种：选0个物品</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> w <span class="token operator">&lt;=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Ways<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Ways<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//令k种物品里凑出体积w的方法数，暂由前k-1个物品凑成。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//如果第k种物品体积小于w</span>                <span class="token comment" spellcheck="true">//则k种物品凑成体积w的方法：k-1种物品凑成w + k-1种物品凑成w-a[k]体积+k物品a[k]这一种方法</span>                Ways<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Ways<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> Ways<span class="token punctuation">[</span>w <span class="token operator">-</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> Ways<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>0-1背包问题</strong><br>DP（动态规划）求解过程可以这样理解：对于前i件物品，背包容量为j时，所取得的最大价值（此时称为状态3）只依赖于前两个状态。</p><p>状态1：前i-1件物品，背包容量为j。在该状态下，只要不选第i个物品，就可以转换到状态3。</p><p>状态2：前i-1件物品，背包容量为j-w[i]。在该状态下，选完前i-1个商品后，背包还剩w[i]的容量，加上第i个物品，也可以转换到状态3。</p><p>这里要求最大价值，所以只要从状态1和状态2中选择最大价值较大的一个即可。 </p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3500</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">13000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//w:体积  d:价值</span><span class="token comment" spellcheck="true">////方法一： 二维数组表示</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示取maxn种物品，使它们总体积不超过maxm的最优取法取得的价值总和</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"物品个数n:"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"背包的总容量体积："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入物品"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"体积，单价："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组初始化值为0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大价值："</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////方法二： 一维滚动数组</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"物品个数n:"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"背包的总容量体积："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入物品"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"体积，单价："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组初始化0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大价值："</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP 生命周期</title>
      <link href="/2020/03/13/Life-cycle-of-JSP/"/>
      <url>/2020/03/13/Life-cycle-of-JSP/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-0.png" alt></p><ol><li>将JSP页面文件翻译为servlet代码;</li><li>编译servlet代码为class文件;</li><li>将servlet载入容器并实例化类;</li><li>调用jspInit()方法初始化,在servlet实例化后只执行一次;</li><li>使用_jspService()方法处理请求,这个方法不能重写;</li><li>当JSP从容器中移除时调用jspDestroy()方法.</li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/13/hello-world/"/>
      <url>/2019/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Changelog</title>
      <link href="/2019/08/06/UpdateLog/"/>
      <url>/2019/08/06/UpdateLog/</url>
      
        <content type="html"><![CDATA[<ul><li><p>2019.07.25 框架搭建完成</p></li><li><p>2019.08.02 主题修改完成</p></li><li><p>2019.08.06 崩坏学园 2 LIVE2D 上线 <del>那么崩坏 3 的看板娘什么时候能放上 Web 呢</del></p></li><li><p>2019.08.07 部署 Hexo Admin</p></li><li><p>2019.08.10 </p><ul><li>部署 HTTPS</li><li>支持 HSTS</li></ul></li><li><p>2019.08.15 更新 favicon</p></li><li><p>2020.02.25 迁移至阿里云</p></li><li><p>2020.03.01 </p><ul><li>更新 nginx 1.17.8 </li><li>支持 HTTP/3 （不完善）</li><li>支持 TLS1.3 </li><li>停用 TLS1.1 TLS1.2 协议  </li></ul><p>nginx 编译参数：</p><pre><code>  --add-module=../ngx_brotli --with-openssl=../quiche/deps/boringssl --with-quiche=../quiche --with-http_v2_module --with-http_v3_module --with-http_ssl_module --with-http_gzip_static_module --with-http_v2_hpack_enc --with-http_realip_module --with-threads --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-zlib=../zlib-cf --add-module=../ngx_devel_kit --add-module=../headers-more-nginx-module --add-module=../lua-nginx-module-0.10.16rc4 --with-file-aio --add-module=../ngx_http_geoip2_module --add-module=../ngx-fancyindex --add-module=../nginx-dav-ext-module --add-module=../ngx_http_substitutions_filter_module --with-libatomic --with-http_dav_module --with-http_stub_status_module</code></pre></li><li><p>2020.03.05 </p><ul><li>优化 加载速度</li><li>Live2D 音频替换为 opus </li><li>通过 webp server 替换所有图片为 webp </li><li>非首屏图片懒加载</li></ul></li><li><p>2020.03.12 新增 服务器 webhook 自动部署</p></li><li><p>2020.03.13  </p><ul><li>修复 懒加载导致的首页图片错位</li><li>更新 全局配色</li></ul></li><li><p>2020.03.14</p><ul><li>部署 zabbix grafana</li></ul></li><li><p>2020.03.15</p><ul><li>申请提交 HSTS preload list</li></ul></li><li><p>2020.03.24</p><ul><li>移除主页轮播图相关代码</li></ul></li><li><p>2020.05.08</p><ul><li>更换 DNS 解析服务至 DNSPod</li><li>为网站增加 Cloudflare CDN</li></ul></li><li><p>2020.05.12</p><ul><li>鉴于 Cloudflare 在国内是减速 CDN 再次更换为百度云加速</li><li>修复 Live2D 关闭后刷新页面会再次出现的问题</li></ul></li><li><p>2020.05.13</p><ul><li>添加显示 Live2D 按钮</li></ul></li><li><p>2020.05.24</p><ul><li>背景音乐增加到15首，Safari 使用 CAF 封装 Opus 编码，其他浏览器使用 OGG 封装 Vorbis 编码</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIVE2D </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
