<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax</title>
      <link href="/2020/09/01/ajax/"/>
      <url>/2020/09/01/ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Ajax (Asynchronous JavaScript and XML)</code> 主要用来加载数据，避免刷新整个页面。<br><code>XMLHttpRequest</code> 是 <code>Ajax</code> 的基础。所有现代浏览器均支持 <code>XMLHttpRequest</code> 对象（IE5 和 IE6 使用 <code>ActiveXObject</code> ）。  </p><h3 id="创建-XMLHttpRequest-对象"><a href="#创建-XMLHttpRequest-对象" class="headerlink" title="创建 XMLHttpRequest 对象"></a>创建 XMLHttpRequest 对象</h3><pre class=" language-js"><code class="language-js">myAjax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><p><code>XMLHttpRequest</code> 对象进行 HTTP 请求前必须通过 <code>open</code> 初始化， <code>open</code> 接受五个参数，分别为请求方法、请求链接、异步标识、账号和密码用以服务端验证  </p><pre class=" language-js"><code class="language-js">myAjax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Method<span class="token punctuation">,</span> URL<span class="token punctuation">,</span> Asynchronous<span class="token punctuation">,</span> UserName<span class="token punctuation">,</span> Password<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>method</code> ：请求的类型；GET 或 POST。</li><li><code>url</code> ：文件在服务器上的位置。</li><li><code>async</code> ：true（异步）或 false（同步）。</li></ul><p>在成功初始化请求之后， <code>XMLHttpRequest</code> 对象的 <code>setRequestHeader</code> 方法可以用来设置请求头：</p><pre class=" language-js"><code class="language-js">myAjax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>调用 <code>open</code> 方法后，就可以通过调用 <code>send</code> 方法按照 <code>open</code> 方法设定的参数将请求进行发送  </p><pre class=" language-js"><code class="language-js">myAjax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当 <code>open</code> 方法设定发送的方式为异步请求时， <code>onreadystatechange</code> 事件监听器将自动在 <code>XMLHttpRequest</code> 对象的 <code>readyState</code> 属性改变时被触发</p><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span> <span class="token punctuation">(</span>readyState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当 open 方法被成功调用，readyState 为 1</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当 send 方法被调用，readyState 属性被置为 2</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HTTP 响应内容开始加载，readyState 属性被置为 3</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HTTP 响应内容结束加载，readyState 属性被置为 4</span><span class="token punctuation">}</span></code></pre><p>如果 <code>XMLHttpRequest</code> 对象的 <code>readyState</code> 属性还没有变成 4， <code>abort</code> 可以终止请求。这个方法可以确保异步请求中的回调不被执行。  </p><pre class=" language-js"><code class="language-js">myAjax<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明 XMLHttpRequest </span>    <span class="token comment" spellcheck="true">// 在 IE5 和 IE6 中需要使用 ActiveXObject</span>    <span class="token keyword">const</span> XHR <span class="token operator">=</span> XMLHttpRequest<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 XMLHttqRequest</span>    XHR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置请求状态改变时执行的函数</span>    XHR<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>XHR<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token string">`响应状态：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>XHR<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">,</span> <span class="token string">"FINISH"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//XHR.responseText 为响应体</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化请求参数</span>    XHR<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 发起请求</span>    XHR<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"s=str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h3><p>使用 <code>XMLHttpRequest</code> 对象的 <code>responseText</code> 或 <code>responseXML</code> 属性获取响应数据。  </p><ul><li><code>responseText</code> ：获得字符串形式的响应数据。</li><li><code>responseXML</code> ：获得 XML 形式的响应数据。</li></ul><p>当服务端的响应不是 XML 时，使用 <code>responseText</code> 属性。</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>inndeHTML <span class="token operator">=</span> myAjax<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC Toolset 的安装和使用</title>
      <link href="/2020/08/25/InstallGCCToolset/"/>
      <url>/2020/08/25/InstallGCCToolset/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常用的 Linux 发行版一般不会自带最新的 GCC 等编译工具，如果我们想体验最新的 C++ 语法特性，就免不了要自己编译 GCC 或者下载预编译版本，这无疑使比较麻烦的。尤其时考虑到许多配套的编译和调试工具也需要升级，如 make、GDB 等，就更让人头大了。好在 RedHat 官方提供了  GCC Toolset 软件包，提供了便捷的安装使用体验，让你只需几条命令就可以用上最新的 GCC 版本。</p><h2 id="安装-GCC-Toolset"><a href="#安装-GCC-Toolset" class="headerlink" title="安装 GCC Toolset"></a>安装 GCC Toolset</h2><p>RedHat 从 RHEL 8 开始推出了 GCC Toolset，它是包括了最新开发工具和性能分析工具的一个软件集合，目前最新版本是 GCC Toolset 9，包括了以下工具：</p><table><thead><tr><th>名称</th><th>版本</th><th>简介</th></tr></thead><tbody><tr><td>GCC</td><td>9.2.1</td><td>A portable compiler suite with support for C, C++, and Fortran.</td></tr><tr><td>GDB</td><td>8.3</td><td>A command-line debugger for programs written in C, C++, and Fortran.</td></tr><tr><td>Valgrind</td><td>3.15.0</td><td>An instrumentation framework and a number of tools to profile applications in order to detect memory errors, identify memory management problems, and report any use of improper arguments in system calls.</td></tr><tr><td>SystemTap</td><td>4.1</td><td>A tracing and probing tool to monitor the activities of the entire system without the need to instrument, recompile, install, and reboot.</td></tr><tr><td>Dyninst</td><td>10.1.0</td><td>A library for instrumenting and working with user-space executables during their execution.</td></tr><tr><td>binutils</td><td>2.32</td><td>A collection of binary tools and other utilities to inspect and manipulate object files and binaries.</td></tr><tr><td>elfutils</td><td>0.176</td><td>A collection of binary tools and other utilities to inspect and manipulate ELF files.</td></tr><tr><td>dwz</td><td>0.12</td><td>A tool to optimize DWARF debugging information contained in ELF shared libraries and ELF executables for size.</td></tr><tr><td>make</td><td>4.2.1</td><td>A dependency-tracking build automation tool.</td></tr><tr><td>strace</td><td>5.1</td><td>A debugging tool to monitor system calls that a program uses and signals it receives.</td></tr><tr><td>ltrace</td><td>0.7.91</td><td>A debugging tool to display calls to dynamic libraries that a program makes. It can also monitor system calls executed by programs.</td></tr><tr><td>annobin</td><td>9.08</td><td>A build security checking tool.</td></tr></tbody></table><p>GCC Toolset 在 RadHat 和 CentOS 都可以下载，使用下面的命令安装所有工具：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> gcc-toolset-9</code></pre><p>你也可以只安装其中的某些工具，列出可用的软件包：</p><pre class=" language-bash"><code class="language-bash">yum list available gcc-toolset-9-\*</code></pre><p>然后安装其中的某些软件：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> package_name</code></pre><h2 id="使用-GCC-Toolset"><a href="#使用-GCC-Toolset" class="headerlink" title="使用 GCC Toolset"></a>使用 GCC Toolset</h2><p>如果你想使用 GCC Toolset 中的某个工具，可以使用下面的命令：</p><pre class=" language-bash"><code class="language-bash">scl <span class="token function">enable</span> gcc-toolset-9 ToolName</code></pre><p>如果你想在一个 Shell 中全部使用 GCC Toolset 中的新版本而不是系统预装的旧版本，你可以使用下面的命令启动一个新的 Shell :</p><pre class=" language-bash"><code class="language-bash">scl <span class="token function">enable</span> gcc-toolset-9 <span class="token function">bash</span></code></pre><p>在这个 Shell 下直接输入命令就可以执行新版本的编译工具，而不需要 <code>scl</code> 命令。  </p><h2 id="卸载-GCC-Toolset"><a href="#卸载-GCC-Toolset" class="headerlink" title="卸载 GCC Toolset"></a>卸载 GCC Toolset</h2><p>就像卸载普通软件包一样，执行下面的命令即可全部卸载：</p><pre class=" language-bash"><code class="language-bash">yum remove gcc-toolset-N\*</code></pre>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fetch API</title>
      <link href="/2020/08/12/fetch/"/>
      <url>/2020/08/12/fetch/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>fetch()</code> 方法定义在 <code>Window</code> 对象以及 <code>WorkerGlobalScope</code> 对象上，用于发起获取资源的请求，其返回一个 <code>Promise</code> 对象，这个 <code>Promise</code> 对象会在请求响应后被 <code>resolve</code> ，并传回 <code>Response</code> 对象。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p> <code>Promise&lt;Response&gt; fetch(input[, init])</code></p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>定义要获取的资源，其值可以是：</p><ul><li>一个字符串，包含要获取资源的 <code>URL</code> ，一些浏览器会接受 <code>blob</code> 和 <code>data</code> 作为 <code>schemes</code> 。</li><li>一个 <code>Request</code> 对象。  </li></ul><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>一个配置项对象，包括所有对请求的设置。可选的参数有：</p><ul><li><code>method</code> : 请求使用的方法，如 <code>GET</code> 、 <code>POST</code> 。</li><li><code>headers</code> : 请求的头信息，形式为 <code>Headers</code> 的对象或包含 <code>ByteString</code> 值的对象字面量。</li><li><code>body</code> : 请求的 <code>body</code> 信息：可能是一个 <code>Blob</code> 、 <code>BufferSource</code> 、 <code>FormData</code> 、 <code>URLSearchParams</code> 或者 <code>USVString</code> 对象，注意 <code>GET</code> 或 <code>HEAD</code> 方法的请求不能包含 <code>body</code> 信息。</li><li><code>mode</code> : 请求的模式，如 <code>cors</code> 、 <code>no-cors</code> 或者 <code>same-origin</code> 。</li><li><code>credentials</code> : 请求的 <code>credentials</code> ，如 <code>omit</code> 、 <code>same-origin</code> 或者 <code>include</code> ，为了在当前域名内自动发送 <code>cookie</code> ，必须提供这个选项。</li><li><code>cache</code> : 请求的 <code>cache</code> 模式： <code>default</code> 、 <code>no-store</code> 、 <code>reload</code> 、 <code>no-cache</code> 、 <code>force-cache</code> 或者 <code>only-if-cached</code> 。</li><li><code>redirect</code> : 可用的 <code>redirect</code> 模式： <code>follow</code> 自动重定向， <code>error</code> 如果产生重定向将自动终止并且抛出一个错误，或者 <code>manual</code> 手动处理重定向。</li><li><code>referrer</code> : 一个 <code>USVString</code> 可以是 <code>no-referrer</code> 、 <code>client</code> 或一个 <code>URL</code> ，默认是 <code>client</code> 。</li><li><code>referrerPolicy</code> : 指定了 HTTP 头部 <code>referer</code> 字段的值，可能为以下值之一： <code>no-referrer</code> 、 <code>no-referrer-when-downgrade</code> 、 <code>origin</code> 、 <code>origin-when-cross-origin</code> 、 <code>unsafe-url</code> 。</li><li><code>integrity</code> : 包括请求的 <code>subresource integrity</code> 值，例如： <code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code> 。</li></ul><p>返回一个 <code>Promise</code> ， <code>resolve</code> 时回传 <code>Response</code> 对象。</p><h2 id="fetch-与-jQuery-ajax-区别"><a href="#fetch-与-jQuery-ajax-区别" class="headerlink" title="fetch 与 jQuery.ajax 区别"></a>fetch 与 jQuery.ajax 区别</h2><ul><li>当接收到一个代表错误的 <code>HTTP</code> 状态码时，从 <code>fetch()</code> 返回的 <code>Promise</code> 不会被标记为 <code>reject</code> ，即使响应的 <code>HTTP</code> 状态码是 <code>404</code> 或 <code>500</code> ，其会将 <code>Promise</code> 状态标记为 <code>resolve</code> ，但是返回的 <code>Promise</code> 会将 <code>resolve</code> 的返回值的 <code>ok</code> 属性设置为 <code>false</code> ，仅当网络故障时或请求被阻止时，才会标记为 <code>reject</code> 。</li><li><code>fetch()</code> 不会接受跨域 <code>cookies</code> ，你也不能使用 <code>fetch()</code> 建立起跨域会话，其他域的 <code>Set-Cookie</code> 头部字段将会被无视。</li><li><code>fetch()</code> 不会发送 <code>cookies</code> ，除非使用了 <code>credentials</code> 的初始化选项。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h3><p>发起一个简单的资源请求，对于 <code>fetch</code> 请求返回一个 <code>Promise</code> 对象，这个 <code>Promise</code> 对象会在请求响应后被 <code>resolve</code> ，并传回 <code>Response</code> 对象。</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/search.xml"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h3><p>通过 <code>init</code> 配置对象设置参数，可以设置 <code>method</code> 、 <code>headers</code> 、 <code>body</code> 、 <code>mode</code> 、 <code>credentials</code> 、 <code>cache</code> 、 <code>redirect</code> 、 <code>referrer</code> 、 <code>referrerPolicy</code> 、 <code>integrity</code> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"accept"</span><span class="token punctuation">:</span> <span class="token string">"application/javascript"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"application/xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/search.xml"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> headers<span class="token punctuation">,</span>        cache<span class="token punctuation">:</span> <span class="token string">'no-cache'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="Headers-对象"><a href="#Headers-对象" class="headerlink" title="Headers 对象"></a>Headers 对象</h4><ul><li><code>Headers.append()</code> : 给现有的 <code>header</code> 添加一个值，或者添加一个未存在的 <code>header</code> 并赋值。</li><li><code>Headers.delete()</code> : 从 <code>Headers</code> 对象中删除指定 <code>header</code> 。</li><li><code>Headers.entries()</code> : 以迭代器的形式返回 <code>Headers</code> 对象中所有的键值对。</li><li><code>Headers.get()</code> : 以 <code>ByteString</code> 的形式从 <code>Headers</code> 对象中返回指定 header 的全部值。</li><li><code>Headers.has()</code> : 以布尔值的形式从 <code>Headers</code> 对象中返回是否存在指定的 <code>header</code> 。</li><li><code>Headers.keys()</code> : 以迭代器的形式返回 <code>Headers</code> 对象中所有存在的 <code>header</code> 名。</li><li><code>Headers.set()</code> : 替换现有的 <code>header</code> 的值，或者添加一个未存在的 <code>header</code> 并赋值。</li><li><code>Headers.values()</code> : 以迭代器的形式返回 <code>Headers</code> 对象中所有存在的 <code>header</code> 的值。</li></ul><h3 id="响应处理"><a href="#响应处理" class="headerlink" title="响应处理"></a>响应处理</h3><p>通过 <code>Response</code> 对象对响应的数据作处理，包括获取响应状态以及响应体的处理等操作。</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/search.xml"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><p><code>Response</code> 对象的相关属性与方法：</p><ul><li><code>Response.headers</code> : 只读，包含此 <code>Response</code> 所关联的 <code>Headers</code> 对象。</li><li><code>Response.ok</code> : 只读，包含了一个布尔值，标示该 <code>Response</code> 成功， <code>HTTP</code> 状态码的范围在 <code>200-299</code> 。</li><li><code>Response.redirected</code> : 只读，表示该 <code>Response</code> 是否来自一个重定向，如果是的话，它的 <code>URL</code> 列表将会有多个条目。</li><li><code>Response.status</code> : 只读，包含 <code>Response</code> 的状态码。</li><li><code>Response.statusText</code> : 只读，包含了与该 <code>Response</code> 状态码一致的状态信息。</li><li><code>Response.type</code> : 只读，包含 <code>Response</code> 的类型，例如 <code>basic</code> 、 <code>cors</code> 。</li><li><code>Response.url</code> : 只读，包含 <code>Response</code> 的 <code>URL</code> 。</li><li><code>Response.useFinalURL</code> : 包含了一个布尔值，来标示这是否是该 <code>Response</code> 的最终 <code>URL</code> 。</li><li><code>Response.clone()</code> : 创建一个 <code>Response</code> 对象的克隆。</li><li><code>Response.error()</code> : 返回一个绑定了网络错误的新的 <code>Response</code> 对象。</li><li><code>Response.redirect()</code> : 用另一个 <code>URL</code> 创建一个新的 <code>Response</code> 。</li></ul><p><code>Response</code> 实现了 <code>Body</code> 接口，相关属性与方法可以直接使用：</p><ul><li><code>Body.body</code> : 只读，一个简单的 <code>getter</code> ，用于暴露一个 <code>ReadableStream</code> 类型的 <code>body</code> 内容。</li><li><code>Body.bodyUsed</code> : 只读，包含了一个布尔值来标示该 <code>Response</code> 是否读取过 <code>Body</code> 。</li><li><code>Body.arrayBuffer()</code> : 读取 <code>Response</code> 对象并且将它设置为已读，并返回一个被解析为 <code>ArrayBuffer</code> 格式的 <code>Promise</code> 对象， <code>Responses</code> 对象被设置为了 <code>stream</code> 的方式，所以它们只能被读取一次。</li><li><code>Body.blob()</code> : 读取 <code>Response</code> 对象并且将它设置为已读，并返回一个被解析为 <code>Blob</code> 格式的 <code>Promise</code> 对象。</li><li><code>Body.formData()</code> : 读取 <code>Response</code> 对象并且将它设置为已读，并返回一个被解析为 <code>FormData</code> 格式的 <code>Promise</code> 对象。</li><li><code>Body.json()</code> : 读取 <code>Response</code> 对象并且将它设置为已读，并返回一个被解析为 <code>JSON</code> 格式的 <code>Promise</code> 对象。</li><li><code>Body.text()</code> : 读取 <code>Response</code> 对象并且将它设置为已读，并返回一个被解析为 <code>USVString</code> 格式的 <code>Promise</code> 对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 导出表格</title>
      <link href="/2020/08/05/JavaScriptExportSheet/"/>
      <url>/2020/08/05/JavaScriptExportSheet/</url>
      
        <content type="html"><![CDATA[<h2 id="导出-CSV"><a href="#导出-CSV" class="headerlink" title="导出 CSV"></a>导出 CSV</h2><p>JavaScript 导出 CSV 比较简单，只需要根据 CSV 的格式进行逗号分隔和换行，最后将文本保存成 CSV 文件即可。<br>需要注意的是，Excel 默认使用 ANSI 编码来打开 CSV 文件，如果 CSV 文件使用 UTF-8 编码，使用 Excel 打开就会乱码，解决方法是使用 Excel 中 <code>数据</code> - <code>导入自文件</code> 向导来导入 UTF-8 编码的 CSV 文件，这样就可以正常显示 Unicode 字符了。但这相比直接打开麻烦了很多，另一个办法是将 CSV 文件保存成 UTF-8 BOM 编码，这样 Excel 就会以 UTF-8 编码读取文件，不会出现乱码了。</p><blockquote><p>BOM (<a href="https://en.wikipedia.org/wiki/Byte_order_mark" target="_blank" rel="noopener">Byte Order Mark</a>) 是一段特定的十六进制序列，在 UTF-16 和 UTF-32 中用来标识该字节流的字节序，是高位在前还是低位在前，在 UTF-8 中 BOM 一般用来标识文件采用 UTF-8 编码，但并不是必要的。  </p></blockquote><p>UTF-8 的 BOM 的十六进制表示为 <code>EF BB BF</code> ，也可以用一个 Unicode 字符表示： <code>U+FEFF</code> 。所以我们只要在 CSV 文件开头加入 BOM 就可以将文件保存为 UTF-8 BOM 格式。可以直接在 <code>Buffer</code> 中先加入 <code>\xEF\xBB\xBF</code> 作为开头 ，也可以在字符串开头加入 <code>\uFEFF</code> 这个 Unicode 字符。  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">writeCSV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> csvContent <span class="token operator">=</span> <span class="token string">'\uFEFF'</span><span class="token punctuation">;</span>    csvContent <span class="token operator">=</span> csvContent<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"布洛妮娅萌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'konata.csv'</span><span class="token punctuation">,</span> csvContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="导出-xls-和-xlsx"><a href="#导出-xls-和-xlsx" class="headerlink" title="导出 xls 和 xlsx"></a>导出 xls 和 xlsx</h2><p>导出 xls 和 xlsx，肯定要使用库了，目前比较好用的是 <a href="https://github.com/sheetjs/sheetjs" target="_blank" rel="noopener">SheetJS</a>，它分为专业版和社区版，专业版主要增加了样式设置、插入图片图表的功能，据说价格很贵，一般情况下社区版足够使用了。社区版也叫做 js-xlsx，支持数据读取、解析处理、数据导出，同时支持浏览器端和 Node 端。</p><h3 id="SheetJS-常用-API"><a href="#SheetJS-常用-API" class="headerlink" title="SheetJS 常用 API"></a>SheetJS 常用 API</h3><h4 id="workbook-和-worksheet"><a href="#workbook-和-worksheet" class="headerlink" title="workbook 和 worksheet"></a>workbook 和 worksheet</h4><p>首先要明确的两个概念是 <code>workbook</code> 和 <code>worksheet</code> , 这两个对象分别对应了整个文件（工作簿）和一个文件中的一个表格（工作表）。</p><h5 id="workbook"><a href="#workbook" class="headerlink" title="workbook"></a>workbook</h5><p><code>workbook</code> 有两种方式来获取：</p><ul><li>读取已有的文件，返回一个 <code>workbook</code> 对象。</li><li>通过 <code>XLSX.utils.book_new ()</code> 创建空白的 <code>workbook</code> 对象。</li></ul><p>常用到的 <code>workbook</code> 的属性有两个：</p><ul><li><p><code>Sheets</code> ：文件中的表格列表。</p></li><li><p><code>SheetNames</code> ：文件中的表格名列表，表现为数组。</p><p>需要获取 <code>workbook</code> 中的某个表格时，可以这样获取：</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> sheetname <span class="token operator">=</span> workbook<span class="token punctuation">.</span>SheetNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> worksheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>Sheets<span class="token punctuation">[</span>sheetname<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h5 id="worksheet"><a href="#worksheet" class="headerlink" title="worksheet"></a>worksheet</h5><p><code>worksheet</code> 对象代表文件中的一个表格，可以通过下标的形式访问表格中任意一小格的值：</p><pre class=" language-js"><code class="language-js">worksheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span></code></pre><p>其返回值为一个对象，一般具有两个属性：</p><ul><li><code>v</code> ：当前小格的值。</li><li><code>t</code> ：当前小格值的类型。</li></ul><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>SheetJS 通过两种方式读取文件内容：</p><ul><li><p><code>XLSX.read (data, read_options)</code> ：读取 <code>data</code> 并解析。</p></li><li><p><code>XLSX.readFile (filename, read_options)</code> ：读取 <code>filename</code> 文件并解析。</p><p>有关 <code>read_options</code> 的内容详见 <a href="https://github.com/SheetJS/sheetjs#parsing-options" target="_blank" rel="noopener">read_options</a>。</p></li></ul><h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><p>SheetJS 通过三种方法写入数据，这两种方法均会对数字、字符串、 <code>null</code> 和 <code>undefined</code> 、日期等类型进行自动解析：</p><ul><li><p><code>XLSX.writeFile (workbook, filename [, write_options])</code> ：按照 <code>workbook</code> 对象生成文件。若在浏览器端，会自动下载该文件。在 Node 端，会自动生成该文件并保存到本地</p></li><li><p><code>XLSX.writeFileAsync (filename, workbook, o, cb)</code> : 按照 <code>workbook</code> 对象生成文件。当 <code>o</code> 执行完毕后，调用 <code>cb</code> 回调函数。</p><p>有关 <code>read_options</code> 的内容详见 <a href="https://github.com/SheetJS/sheetjs#parsing-options" target="_blank" rel="noopener">read_options</a>。</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// XLSX.writeFile</span><span class="token comment" spellcheck="true">// 第一个参数为一个 workbook 对象，第二个参数为所要生成文件的文件名</span>XLSX<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> <span class="token string">'out.xlsb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// XLSX.write</span><span class="token comment" spellcheck="true">// 第一个参数为一个 workbook 对象，第二个参数是对生成文件格式的一些设置</span><span class="token comment" spellcheck="true">// 在本例中，生成格式为 xlsx 的文件，编码为 base64</span>XLSX<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> <span class="token punctuation">{</span>    bookType<span class="token punctuation">:</span> <span class="token string">'xlsx'</span><span class="token punctuation">,</span>    bookSST<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'base64'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 由于其不生成文件，而只是返回组成文件的数据，所以很适合一些需要通过异步请求来修改服务器上的文件等场景</span></code></pre><h4 id="转换数据格式"><a href="#转换数据格式" class="headerlink" title="转换数据格式"></a>转换数据格式</h4><p>SheetJS 支持读取文件并把数据导出成任意格式，可通过以下几个 API 完成，传入的参数均是一个 worksheet 对象</p><ul><li><code>XLSX.utils.sheet_to_csv (worksheet)</code> ：将表格数据转化为 CSV 格式。</li><li><code>XLSX.utils.sheet_to_txt (worksheet)</code> ：将表格数据转化为生成由 UTF-16 编码的 txt 格式。</li><li><code>XLSX.utils.sheet_to_html (worksheet)</code> ：将表格转化为 html 文件。</li><li><code>XLSX.utils.sheet_to_json (worksheet)</code> : 将表格数据转化为 json 格式。</li></ul><h4 id="表格操作"><a href="#表格操作" class="headerlink" title="表格操作"></a>表格操作</h4><ul><li><code>XLSX.utils.aoa_to_sheet (Array [][])</code> ：将二维数组转化为 <code>worksheet</code> 对象。</li><li><code>XLSX.utils.json_to_sheet (Object)</code> ：将 js 对象转化为 <code>worksheet</code> 对象。</li><li><code>XLSX.utils.table_to_sheet (HTML)</code> ：将 DOM 节点转化为 <code>worksheet</code> 对象（一般为 <code>table</code> 元素、 <code>tr</code> 元素和 <code>th</code> 元素）。</li><li><code>XLSX.utils.sheet_add_aoa (worksheet, Array [][])</code> ：将二维数组中的数据添加到已有的 <code>worksheet</code> 中。</li><li><code>XLSX.utils.sheet_add_json (worksheet, Object)</code> ：将 js 对象中的数据添加到已有的 <code>worksheet</code> 中。</li><li><code>XLSX.utils.book_append_sheet (workbook, worksheet, sheetname)</code> ：将 <code>worksheet</code> 对象添加到 <code>workbook</code> 中，并命名为 <code>sheetname</code> 。</li></ul><h3 id="将网页中的-table-元素转换成-xlsx-并下载"><a href="#将网页中的-table-元素转换成-xlsx-并下载" class="headerlink" title="将网页中的 table 元素转换成 xlsx 并下载"></a>将网页中的 table 元素转换成 xlsx 并下载</h3><p>引入 SheetJS：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dist/xlsx.full.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>JavaScript:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sheet <span class="token operator">=</span> XLSX<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">table_to_sheet</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将网页中第一个 table 元素转换为工作表对象</span>    <span class="token keyword">let</span> filename <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"table-title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到文件名</span>    <span class="token function">openDownloadDialog</span><span class="token punctuation">(</span><span class="token function">sheet2blob</span><span class="token punctuation">(</span>sheet<span class="token punctuation">)</span><span class="token punctuation">,</span> filename <span class="token operator">+</span> <span class="token string">'.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件下载</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将一个 sheet 转成最终的 excel 文件的 blob 对象，然后利用 URL.createObjectURL 下载</span><span class="token keyword">function</span> <span class="token function">sheet2blob</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> sheetName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> workbook <span class="token operator">=</span> <span class="token punctuation">{</span>        SheetNames<span class="token punctuation">:</span> <span class="token punctuation">[</span>sheetName<span class="token punctuation">]</span><span class="token punctuation">,</span>        Sheets<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    workbook<span class="token punctuation">.</span>Sheets<span class="token punctuation">[</span>sheetName<span class="token punctuation">]</span> <span class="token operator">=</span> sheet<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成 excel 的配置项</span>    <span class="token keyword">const</span> wopts <span class="token operator">=</span> <span class="token punctuation">{</span>        bookType<span class="token punctuation">:</span> <span class="token string">'xlsx'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 要生成的文件类型</span>        bookSST<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否生成 Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本 IOS 设备上有更好的兼容性</span>        type<span class="token punctuation">:</span> <span class="token string">'binary'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> wbout <span class="token operator">=</span> XLSX<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> wopts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">s2ab</span><span class="token punctuation">(</span>wbout<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"application/octet-stream"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字符串转 ArrayBuffer</span>    <span class="token keyword">function</span> <span class="token function">s2ab</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> view<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> buf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> blob<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 通用的打开下载对话框方法，没有测试过具体兼容性 * @param url 下载地址，也可以是一个 blob 对象，必选 * @param saveName 保存文件名，可选 */</span><span class="token keyword">function</span> <span class="token function">openDownloadDialog</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> saveName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> url <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> url <span class="token keyword">instanceof</span> <span class="token class-name">Blob</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建 blob 地址</span>    <span class="token keyword">const</span> aLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    aLink<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>    aLink<span class="token punctuation">.</span>download <span class="token operator">=</span> saveName <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTML5 新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效</span>    <span class="token keyword">let</span> event<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        event <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">'MouseEvents'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        event<span class="token punctuation">.</span><span class="token function">initMouseEvent</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> window<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    aLink<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>HTML:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button is-link margin-btn<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exportExcel()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    导出 Excel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Excle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 选择器性能优化</title>
      <link href="/2020/08/02/CSSPerformance/"/>
      <url>/2020/08/02/CSSPerformance/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器计算样式的规则"><a href="#浏览器计算样式的规则" class="headerlink" title="浏览器计算样式的规则"></a>浏览器计算样式的规则</h2><p>通常来说，计算样式的第一步是创建一组匹配选择器，即浏览器计算出给指定元素应用哪些类、伪选择器和 ID；第二步涉及到从匹配选择器中获取所有样式规则，并计算出此元素的最终样式。</p><p>浏览器读取 CSS 选择器遵循从右到左的顺序，例如下面的 CSS 选择器：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span><span class="token pseudo-class">:nth-last-child(-n+1)</span> h1 <span class="token class">.title</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* styles */</span><span class="token punctuation">}</span></code></pre><p>那么浏览器要做的事情是：</p><ol><li>寻找所有包含 <code>title</code> 类的元素</li><li>在这些元素中，筛选出其父元素是 <code>&lt;h1&gt;</code> 标签的元素</li><li>接着再筛选出父元素是其父元素中第奇数个子元素的元素</li><li>对经过筛选后的元素应用样式</li></ol><h2 id="CSS-选择器性能排行"><a href="#CSS-选择器性能排行" class="headerlink" title="CSS 选择器性能排行"></a>CSS 选择器性能排行</h2><p>Steve Souders（Google Web 工程师，曾经写过三本 Web 性能为主题的 O’Reilly）曾于 2009 年总结了 CSS 选择器性能排行：</p><ol><li>ID 选择器（ <code>#id</code> ）</li><li>类选择器（ <code>.className</code> ）</li><li>标签选择器（ <code>div</code>  <code>h1</code>  <code>p</code> ）</li><li>相邻选择器（ <code>h1+p</code> ）</li><li>子选择器（ <code>ul &gt; li</code> ）</li><li>后代选择器（ <code>li a</code> ）</li><li>通配符选择器（ <code>*</code> ）</li><li>属性选择器（ <code>a[rel=&quot;external&quot;]</code> ）</li><li>伪类选择器（ <code>a:hover</code>  <code>li:nth-child</code> ）</li></ol><p>由于从右往左匹配，因此即使是同一类型的选择器之间的性能也有差异 —— 后代选择器中，最右侧是 ID 的选择器的性能就优于最右侧是类的选择器。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中各种遍历方法对比</title>
      <link href="/2020/07/25/LoopMethodInJavaScript/"/>
      <url>/2020/07/25/LoopMethodInJavaScript/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="https://thecodebarbarian.com/for-vs-for-each-vs-for-in-vs-for-of-in-javascript.html" target="_blank" rel="noopener">For vs forEach() vs for/in vs for/of in JavaScript</a>  </p><p>在 JavaScript 中有许多方法来遍历一个对象或者数组，他们之间的差别是一个令许多人人困惑的 <a href="https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript" target="_blank" rel="noopener">问题</a>。<br>一些编码 <a href="https://airbnb.io/javascript/#iterators--nope" target="_blank" rel="noopener">规范</a> 甚至禁止使用某些方法遍历。<br>在这篇文章中，我将解释以下 4 种方法遍历一个数组的不同：  </p><ul><li><code>for (let i = 0; i &lt; arr.length; ++i)</code></li><li><code>arr.forEach((v, i) =&gt; { /* ... */ })</code></li><li><code>for (let i in arr)</code></li><li><code>for (const v of arr)</code></li></ul><p>我将使用几种不同的边界情况概述这些循环结构之间的区别。我还将提供相关的 ESLint 规则链接，以便在你的项目中使用循环结构的最佳实践。  </p><h2 id="语法概述"><a href="#语法概述" class="headerlink" title="语法概述"></a>语法概述</h2><p><code>for</code> 和 <code>for/in</code> 结构让你可以得到数组索引，但不是真正的元素。例如，假设你想打印出下面这个数组中存储的内容：  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>使用 <code>for</code> 或者 <code>for/in</code> ，你需要打印 <code>arr[i]</code> ：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用另外两种方法， <code>forEach()</code> 和 <code>for/of</code> ，你可以得到元素本身。 <code>forEach()</code> 也可以得到元素索引，但 <code>for/of</code> 不可以。</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="非数值属性"><a href="#非数值属性" class="headerlink" title="非数值属性"></a>非数值属性</h2><p>JavaScript 中的数组也是对象。这意味着你不仅可以添加数字，也可以添加字符串属性到数组内。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'object'</span><span class="token comment" spellcheck="true">// Assign to a non-numeric property</span>arr<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">'bad'</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>test<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'bad'</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true, JavaScript arrays are just special objects</span></code></pre><p>四种方法中的三种都忽视了非数值属性。只有 <code>for/in</code> 可以打印出’bad’：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">'bad'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints "a, b, c, bad"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这就是为什么 <a href="https://stackoverflow.com/questions/500504/why-is-using-for-in-for-array-iteration-a-bad-idea" target="_blank" rel="noopener">使用 <code>for/in</code> 来遍历一个数组一般不是一个好主意的原因</a>。其他的遍历方法都正确的忽视了非数值属性：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints "a, b, c"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Prints "a, b, c"</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints "a, b, c"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> el <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>重点：</strong> 避免在数组中使用 <code>for/in</code> 循环，除非你清楚你想要遍历非数值键和继承的键。使用 <a href="https://eslint.org/docs/rules/guard-for-in" target="_blank" rel="noopener">ESLint 规则</a> <code>guard-for-in</code> 来禁止使用 <code>for/in</code> 。</p><h2 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h2><p>JavaScript 数组允许 <a href="https://stackoverflow.com/questions/281264/remove-empty-elements-from-an-array-in-javascript" target="_blank" rel="noopener">空元素</a>。下面这个数组是语法正确的，而且长度为 3：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>让人更困惑的是不同循环结构对待 <code>[&#39;a&#39;,, &#39;c&#39;]</code> 和 <code>[&#39;a&#39;, undefined, &#39;c&#39;]</code> 不同。下面是四种循环结构如何对待像 <code>[&#39;a&#39;,, &#39;c&#39;]</code> 这样有一个空元素的方式。 <code>for/in</code> 和 <code>for/each</code> 跳过了空元素， <code>for</code> 和 <code>for/of</code> 并没有。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Prints "a, undefined, c"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Prints "a, c"</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints "a, c"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Prints "a, undefined, c"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你想知道的话，对于 <code>[&#39;a&#39;, undefined, &#39;c&#39;]</code> 四种方法都会打印出 “a, undefined, c”。<br>这里有另外一种向数组中添加空元素的方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Equivalent to `['a', 'b', 'c',, 'e']`</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'e'</span><span class="token punctuation">;</span></code></pre><p><code>forEach()</code> 和 <code>for/in</code> 跳过了数组中的空元素，但 <code>for</code> 和 <code>for/of</code> 没有。 <code>forEach()</code> 的行为可能会导致一些问题，然而，JavaScript 数组中的空元素一般是很罕见的，因为它们不被 JSON 支持：</p><pre><code>$ node&gt; JSON.parse(&#39;{&quot;arr&quot;:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]}&#39;){ arr: [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ] }&gt; JSON.parse(&#39;{&quot;arr&quot;:[&quot;a&quot;,null,&quot;c&quot;]}&#39;){ arr: [ &#39;a&#39;, null, &#39;c&#39; ] }&gt; JSON.parse(&#39;{&quot;arr&quot;:[&quot;a&quot;,,&quot;c&quot;]}&#39;)SyntaxError: Unexpected token , in JSON at position 12</code></pre><p>所以你不必担心用户数据中的空元素，除非你给了用户完全访问 JavaScript 运行时的权限。</p><p><strong>重点：</strong> <code>for/in</code> 和 <code>forEach()</code> 跳过了数组中的空元素，也被称作 <a href="http://2ality.com/2013/07/array-iteration-holes.html" target="_blank" rel="noopener">“holes”</a>。很少有情况将空元素视为特殊情况而不是 <code>undefined</code> 。如果你关心空元素的特殊情况，下面是一个 <code>.eslintrc.yml</code> 的例子来禁止调用 <code>forEach()</code> 。</p><pre><code>parserOptions:  ecmaVersion: 2018rules:  no-restricted-syntax:    - error    - selector: CallExpression[callee.property.name=&quot;forEach&quot;]      message: Do not use `forEach()` , use `for/of` instead</code></pre><h2 id="函数上下文-Function-Context"><a href="#函数上下文-Function-Context" class="headerlink" title="函数上下文 (Function Context)"></a>函数上下文 (Function Context)</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#Function_context" target="_blank" rel="noopener">Function context</a> 是一个很好的用来表示 this 所指对象的方法。 <code>for</code> 、 <code>for/in</code> 和 <code>for/of</code> 中的 this 保持了和外面一样的指向，但 <code>forEach()</code> 回调将会有一个不同的 this，<strong>除非</strong>你使用 <a href="https://medium.freecodecamp.org/learn-es6-the-dope-way-part-ii-arrow-functions-and-the-this-keyword-381ac7a32881" target="_blank" rel="noopener">箭头函数</a>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints "undefined"</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>重点：</strong> 使用 <code>forEach()</code> 时使用箭头函数。使用 <a href="https://eslint.org/docs/rules/prefer-arrow-callback" target="_blank" rel="noopener"> <code>no-arrow-callback</code> ESLint rule</a> 来对不使用 this 的回调函数要求使用箭头函数。</p><h2 id="Async-Await-和-生成器-Generators"><a href="#Async-Await-和-生成器-Generators" class="headerlink" title="Async/Await 和 生成器 (Generators)"></a>Async/Await 和 生成器 (Generators)</h2><p>另一种使用 <code>forEach()</code> 的边界情况是它 <a href="https://thecodebarbarian.com/basic-functional-programming-with-async-await.html" target="_blank" rel="noopener">不能与 async/await</a> 或者 <a href="http://es2015generators.com/" target="_blank" rel="noopener">generators</a> 使用。如果你的 <code>forEach()</code> 回调是同步的，那没问题，但你不能在 <code>forEach()</code> 回调中使用 <code>await</code> ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>el <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// SyntaxError</span>        <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你也不能使用 <code>yield</code> ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>el <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// SyntaxError</span>        <span class="token keyword">yield</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的例子在 <code>for/of</code> 下是正常的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> el <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> el <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">yield</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>即使你在 <code>forEach()</code> 回调上标记了 <code>async</code> ，在尝试让异步 <code>forEach()</code> 顺序执行时，会感到非常头疼。例如，下面的程序将会将 0-9 用相反的顺序打印出来。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Wait 1 second before printing 0, 0.9 seconds before printing 1, etc.</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">-</span> n <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Will usually print 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 but order is not strictly</span>    <span class="token comment" spellcheck="true">// guaranteed.</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>重点：</strong> 如果你使用 <a href="http://asyncawait.net/" target="_blank" rel="noopener">async/await</a> 或者 <a href="http://es2015generators.com/" target="_blank" rel="noopener">generators</a>，记住 <code>forEach()</code> 是语法糖。它应该小心的使用并且不要将它用于所有情况。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说， <code>for/of</code> 是用来遍历数组的方法中最健壮的。它比传统的 <code>for</code> 循环更加简洁，也没有像 <code>for/in</code> 和 <code>forEach()</code> 那样多的边界情况。 <code>for/of</code> 的主要缺点是需要使用额外的手段来得到索引<sup>[1]</sup> ，也不能像 <code>forEach()</code> 一样链式使用。使用 <code>forEach()</code> 有许多需要注意的地方，它应该被谨慎的使用，但在很多情况下它能让代码变得更简洁。</p><hr><p>[1] 要在 <code>for/of</code> 循环中得到当前数组的索引，可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries" target="_blank" rel="noopener"> <code>Array.entries()</code> 函数</a>.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Prints "0 a", "1 b", "2 c"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历数组时使用异步方法</title>
      <link href="/2020/07/25/UsingAsyncWithForEach/"/>
      <url>/2020/07/25/UsingAsyncWithForEach/</url>
      
        <content type="html"><![CDATA[<p>在遍历数组时，如果在对每个元素的回调中使用异步方法，<b>不能使用 <code>forEach()</code> 遍历</b>。<br><b style="color: red">错误</b>的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">walkPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fileList <span class="token operator">=</span> <span class="token keyword">await</span> fsPromises<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>fileList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>dirent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">lookIntoFile</span><span class="token punctuation">(</span>dirent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><b style="color: green">正确</b>的例子：<br>可以使用 <code>map()</code> 来代替 <code>forEach()</code> ：  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">walkPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fileList <span class="token operator">=</span> <span class="token keyword">await</span> fsPromises<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>fileList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>dirent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">lookIntoFile</span><span class="token punctuation">(</span>dirent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>也可以使用 <code>for ... of</code> 遍历：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">walkPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> fileList <span class="token operator">=</span> <span class="token keyword">await</span> fsPromises<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> dirent <span class="token keyword">of</span> fileList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">lookIntoFile</span><span class="token punctuation">(</span>dirent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>以上两种方法，经过简单测试就能发现，第一种使用 map 遍历比下面使用 <code>for ... of</code> 遍历快得多。原因在于<br><code>Promise.all()</code> 中的对象是异步执行的，但它们的返回顺序还是按照 <code>Promise.all()</code> 中的顺序返回的。而第二种方法是同步执行，遍历完成一个才会遍历下一个，可以根据情况选择这两种方法。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES2017 </tag>
            
            <tag> ES2018 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用命令</title>
      <link href="/2020/07/24/GitCheatSheet/"/>
      <url>/2020/07/24/GitCheatSheet/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><code>git init</code> 创建本地仓库<br><code>git remote add origin https://github.com/user/repo.git</code> 关联远程仓库<br><code>git push -u origin master</code> 关联远程仓库之后的首次推送命令</p><h2 id="一般提交流程"><a href="#一般提交流程" class="headerlink" title="一般提交流程"></a>一般提交流程</h2><p><code>git add .</code> 将文件添加到暂存区<br><code>git commit -m &quot;说明&quot;</code> 将缓存区内容添加到仓库<br><code>git push</code> 将本地仓库同步到远程仓库</p><h2 id="查看修改情况"><a href="#查看修改情况" class="headerlink" title="查看修改情况"></a>查看修改情况</h2><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p><code>git status</code> 以查看在你上次提交之后是否有修改。  </p><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>执行 <code>git diff</code> 来查看具体的文件修改。  </p><ul><li>尚未缓存的改动： <code>git diff</code></li><li>查看已缓存的改动： <code>git diff --cached</code></li><li>查看已缓存的与未缓存的所有改动： <code>git diff HEAD</code></li><li>显示摘要而非整个 diff： <code>git diff --stat</code></li></ul><h2 id="撤销提交"><a href="#撤销提交" class="headerlink" title="撤销提交"></a>撤销提交</h2><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><p> <code>git log</code></p><h3 id="选择撤销记录"><a href="#选择撤销记录" class="headerlink" title="选择撤销记录"></a>选择撤销记录</h3><ul><li><code>git reset --soft commitID</code> 本地文件不会回滚，不撤销 <code>git add</code></li><li><code>git reset commitID</code> 本地文件不会回滚，同时撤销 <code>git add</code></li><li><code>git reset --hard commitID</code> 本地文件也会回滚，可能造成数据丢失  </li></ul><h3 id="强制推送到远程仓库"><a href="#强制推送到远程仓库" class="headerlink" title="强制推送到远程仓库"></a>强制推送到远程仓库</h3><p>如果还没有推送到远程仓库，就不必执行这一步。<br><code>git push origin master -f</code> 不加 <code>-f</code> 会报错，因为版本低于远端，无法直接提交。</p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><p>如果某些文件已经被纳入了版本管理中，之后再将其加入 <code>.gitignore</code> 会不起作用的，这时候需要把本地缓存删除，再进行 git add，这样就不会出现忽略的文件了。<br>git 清除本地缓存：<br> <code>git rm -r --cached .</code></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Module 语法</title>
      <link href="/2020/07/23/ES6Module/"/>
      <url>/2020/07/23/ES6Module/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ES6 之前用于 JavaScript 的模块加载方案，是一些社区提供的，主要有 <code>CommonJS</code> 和 <code>AMD</code> 两种，前者用于<strong>服务器</strong>，后者用于<strong>浏览器</strong>。<br>ES6 提供了模块的实现，使用 <code>export</code> 命令对外暴露接口，使用 <code>import</code> 命令输入其他模块暴露的接口。   </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// CommonJS 模块</span><span class="token keyword">let</span> <span class="token punctuation">{</span>    stat<span class="token punctuation">,</span>    exists<span class="token punctuation">,</span>    readFire<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 模块</span><span class="token keyword">import</span> <span class="token punctuation">{</span>    stat<span class="token punctuation">,</span>    exists<span class="token punctuation">,</span>    readFire<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token punctuation">;</span></code></pre><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6 模块自动采用严格模式，无论模块头部是否有 <code>&quot;use strict&quot;</code> 。<br><strong>严格模式有以下限制</strong>：   </p><ul><li>变量必须<strong>声明后再使用</strong></li><li>函数的参数<strong>不能有同名属性</strong>，否则报错</li><li>不能使用 <code>with</code> 语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量 <code>delete prop</code> ，会报错，只能删除属性 <code>delete * global[prop]</code></li><li><code>eval</code> 不会在它的外层作用域引入变量</li><li><code>eval</code> 和 <code>arguments</code> 不能被重新赋值</li><li><code>arguments</code> 不会自动反映函数参数的变化</li><li>不能使用 <code>arguments.callee</code></li><li>不能使用 <code>arguments.caller</code></li><li>禁止 <code>this</code> 指向全局对象</li><li>不能使用 <code>fn.caller</code> 和 <code>fn.arguments</code> 获取函数调用的堆栈</li><li>增加了保留字（比如 <code>protected</code> 、 <code>static</code> 和 <code>interface</code> ）</li></ul><p>特别是，ES6 中顶层 <code>this</code> 指向 <code>undefined</code> ，即不应该在顶层代码使用 <code>this</code> 。  </p><h2 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h2><p>使用 <code>export</code> 向模块外暴露接口，可以是方法，也可以是变量。   </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 变量</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'leo'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 还可以</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'leo'</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    a<span class="token punctuation">,</span>    b<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 方法</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 还可以</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    a1 <span class="token keyword">as</span> f1<span class="token punctuation">,</span>    a2 <span class="token keyword">as</span> f2<span class="token punctuation">}</span></code></pre><p>可以使用 <code>as</code> 重命名函数的对外接口。<br><strong>特别注意</strong>：<br><code>export</code> 暴露的必须是接口，不能是值。  </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 错误</span><span class="token keyword">export</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    a<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    a <span class="token keyword">as</span> b<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确</span></code></pre><p>暴露方法也是一样：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 错误</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> f<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    f<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="16-4-import-命令"><a href="#16-4-import-命令" class="headerlink" title="16.4 import 命令"></a>16.4 import 命令</h3><p>加载 <code>export</code> 暴露的接口，输出为变量。   </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>    a<span class="token punctuation">,</span>    b<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/a.js'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>import</code> 后大括号指定变量名，需要与 <code>export</code> 的模块暴露的名称一致。<br>也可以使用 <code>as</code> 为输入的变量重命名。   </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>    a <span class="token keyword">as</span> leo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token punctuation">;</span></code></pre><p><code>import</code> 不能直接修改输入变量的值，因为输入变量只读只是个接口，但是如果是个对象，可以修改它的属性。  </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 错误</span><span class="token keyword">import</span> <span class="token punctuation">{</span>    a<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./f.js'</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token comment" spellcheck="true">// 正确</span>a<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'leo'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不报错</span></code></pre><p><code>import</code> 命令具有提升效果，会提升到整个模块头部最先执行，且多次执行相同 <code>import</code> 只会执行一次。</p><h2 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h2><p>当一个模块暴露多个方法和变量，引用时可以用 <code>*</code> 整体加载。   </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> obj <span class="token keyword">from</span> <span class="token string">'/a.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，不允许运行时改变：   </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> obj <span class="token keyword">from</span> <span class="token string">'/a.js'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不允许</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'leo'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h2><p>使用 <code>export default</code> 命令，为模块指定默认输出，引用的时候直接指定任意名称即可。  </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'leo'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">import</span> leo <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token punctuation">;</span><span class="token function">leo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'leo'</span></code></pre><p><code>export default</code> 暴露有函数名的函数时，在调用时相当于匿名函数。   </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'leo'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'leo'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> f<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">import</span> leo <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token punctuation">;</span></code></pre><p><code>export default</code> 其实是输出一个名字叫 <code>default</code> 的变量，所以后面不能跟变量赋值语句。  </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><code>export default</code> 命令的本质是将后面的值，赋给 <code>default</code> 变量，所以可以直接将一个值写在 <code>export default</code> 之后。   </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">export</span> detault <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误</span><span class="token keyword">export</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="export-和-import-复合写法"><a href="#export-和-import-复合写法" class="headerlink" title="export 和 import 复合写法"></a>export 和 import 复合写法</h2><p>常常在先输入后输出同一个模块使用，即转发接口，将两者写在一起。   </p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">{</span>    a<span class="token punctuation">,</span>    b<span class="token punctuation">}</span><span class="token keyword">from</span> <span class="token string">'./leo.js'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 理解为</span><span class="token keyword">import</span> <span class="token punctuation">{</span>    a<span class="token punctuation">,</span>    b<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./leo.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    a<span class="token punctuation">,</span>    b<span class="token punctuation">}</span></code></pre><p>常见的写法还有：   </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 接口改名</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    a <span class="token keyword">as</span> b<span class="token punctuation">}</span><span class="token keyword">from</span> <span class="token string">'./leo.js'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 整体输出</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./leo.js'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认接口改名</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">as</span> a<span class="token punctuation">}</span><span class="token keyword">from</span> <span class="token string">'./leo.js'</span><span class="token punctuation">;</span></code></pre><p><strong>常常用在模块继承</strong>。  </p><h2 id="在浏览器中使用"><a href="#在浏览器中使用" class="headerlink" title="在浏览器中使用"></a>在浏览器中使用</h2><p>ES6 中，可以在浏览器使用 <code>&lt;script&gt;</code> 标签，需要加入 <code>type=&quot;module&quot;</code> 属性，并且这些都是异步加载，避免浏览器阻塞，即等到整个页面渲染完，再执行模块脚本，等同于打开了 <code>&lt;script&gt;</code> 标签的 <code>defer</code> 属性。   </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>另外，ES6 模块也可以内嵌到网页，语法与外部加载脚本一致：   </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="在-Node-中使用"><a href="#在-Node-中使用" class="headerlink" title="在 Node 中使用"></a>在 Node 中使用</h2><p>安装最新版本的 Node，在 Node 13.2.0 之后，不需要使用 <code>--experimental-modules</code> 运行参数。  </p><p>两种方法：  </p><ol><li>在 <code>package.json</code> 中添加 <code>&quot;type&quot;: &quot;module&quot;</code> 。使用这种方法，所有的 <code>.js</code> 和 <code>.mjs</code> 文件都被解释为 ES 模块。如果想要将其解释为 CommonJS，则必须使用 <code>.cjs</code> 扩展名。  </li><li>不在 <code>package.json</code> 中设置类型， <code>.js</code> 文件会被当作 CommonJS 对待，但可以使用扩展名 <code>.mjs</code> 来让 Node 知道它是一个 ES6 模块。  </li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li><li>模块脚本自动采用严格模式，不管有没有声明 <code>use strict</code> 。</li><li>模块之中，可以使用 <code>import</code> 命令加载其他模块（ <code>.js</code> 后缀不可省略，需要提供 <code>绝对 UR</code> L 或 <code>相对 UR</code> L），也可以使用 <code>export</code> 命令输出对外接口。</li><li>模块之中，顶层的 <code>this</code> 关键字返回 <code>undefined</code> ，而不是指向 <code>window</code> 。也就是说，在模块顶层使用 <code>this</code> 关键字，是无意义的。</li><li>同一个模块如果加载多次，将只执行一次。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 javaScript 获取教务系统成绩并推送</title>
      <link href="/2020/07/17/jsCheckGrade/"/>
      <url>/2020/07/17/jsCheckGrade/</url>
      
        <content type="html"><![CDATA[<p><strong>适用于强智教务系统，不保证各个大学通用。</strong>  </p><p><a href="https://github.com/Konata09/GradeCheck" target="_blank" rel="noopener">GitHub</a></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>通过教务系统成绩查询网页或者 api，使用 javaScript 脚本定时（默认定是 20 分钟）执行查询动作。<br>得到成绩后将所有成绩保存到文件，之后每次检查时进行比对，如果有新增的成绩就进行推送。<br>推送方案有多种选择，如方糖、Telegram Bot、邮件提醒、Bark 等。这里使用 <a href="https://github.com/Finb/Bark" target="_blank" rel="noopener">Bark</a> 进行推送。Bark 是一个十分简洁的 iOS 推送 App，利用 Apple 统一的推送通道，延迟很小，但不支持 Android 系统。Bark 也可以自已部署服务端，能保证隐私不被泄露。<br>网页登录好像有定时强制注销用户的设定，即使一直访问也会出现需要登录的情况，出现 session 失效的情况可以在网页端重新登录一次，SessionId 不需要修改。</p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>以 Linux 系统为例</p><h3 id="安装-nodeJS-环境"><a href="#安装-nodeJS-环境" class="headerlink" title="安装 nodeJS 环境"></a>安装 nodeJS 环境</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://nodejs.org/dist/v12.18.2/node-v12.18.2-linux-x64.tar.xz<span class="token function">sudo</span> <span class="token function">mkdir</span> -p /usr/local/lib/nodejs<span class="token function">sudo</span> <span class="token function">tar</span> -xJvf node-v12.18.2-linux-x64.tar.xz -C /usr/local/lib/nodejs</code></pre><p>执行 <code>vim /etc/profile</code> ，在文件最后加上以下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span>/usr/local/lib/nodejs/node-v12.18.2-linux-x64/bin:<span class="token variable">$PATH</span><span class="token function">export</span> NODE_PATH<span class="token operator">=</span>/usr/local/lib/nodejs/node-v12.18.2-linux-x64/lib/node_modules</code></pre><h3 id="安装-nodeJS-模块"><a href="#安装-nodeJS-模块" class="headerlink" title="安装 nodeJS 模块"></a>安装 nodeJS 模块</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g pm2 cheerio node-schedule iconv-lite axios socks-proxy-agent</code></pre><h3 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Konata09/GradeCheck.git<span class="token function">cd</span> GradeCheck</code></pre><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>打开 <code>config.json</code> 文件<br>填写示例如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"api"</span><span class="token punctuation">,</span>    <span class="token property">"site"</span><span class="token operator">:</span> <span class="token string">"jwgl.xxxx.edu.cn"</span><span class="token punctuation">,</span>    <span class="token property">"xh"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"JSESSIONID"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"pushUrl"</span><span class="token operator">:</span> <span class="token string">"https://xxx/xxx/"</span><span class="token punctuation">,</span>    <span class="token property">"proxy"</span><span class="token operator">:</span> <span class="token string">"socks5://127.0.0.1:1080"</span><span class="token punctuation">}</span></code></pre><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>可选 <code>web</code> 或者 <code>api</code> 。<br>代表成绩查询方法， <code>web</code> 代表从网页获取， <code>api</code> 代表从接口获取。  </p><p>从网页获取成绩不需要学号和密码，只需填写 <code>JSESSIONID</code> ，但可能会有 session 过期的问题。<br>从接口获取成绩不需要 <code>JSESSIONID</code> ，需要填写学号和密码，相比从网页获取更加稳定。  </p><h4 id="site"><a href="#site" class="headerlink" title="site"></a>site</h4><p>教务管理系统网址，不需要 http 前缀。</p><h4 id="xh"><a href="#xh" class="headerlink" title="xh"></a>xh</h4><p>学号，当 <code>type</code> 为 <code>web</code> 时，此项不必填写。</p><h4 id="password"><a href="#password" class="headerlink" title="password"></a>password</h4><p>教务管理系统密码，当 <code>type</code> 为 <code>web</code> 时，此项不必填写。</p><h4 id="JSESSIONID"><a href="#JSESSIONID" class="headerlink" title="JSESSIONID"></a>JSESSIONID</h4><p>用浏览器登录教务管理系统，将浏览器 Cookie 中的 <code>JSESSIONID=</code> 的后边内容填入。当 <code>type</code> 为 <code>api</code> 时，此项不必填写。</p><h4 id="pushUrl"><a href="#pushUrl" class="headerlink" title="pushUrl"></a>pushUrl</h4><p>Bark 的推送地址。<br>从 App Store 安装 Bark，即可得到推送地址，当然也可以是自己部署的服务端地址。</p><h4 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h4><p>对教务系统进行代理访问的代理服务器地址，支持 Socks4 和 Socks5 代理。不使用留空即可。</p><h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><pre class=" language-bash"><code class="language-bash">pm2 start gradeCheck.js</code></pre><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><pre class=" language-bash"><code class="language-bash">pm2 logs gradeCheck</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter 和 Listener</title>
      <link href="/2020/06/19/FilterAndListener/"/>
      <url>/2020/06/19/FilterAndListener/</url>
      
        <content type="html"><![CDATA[<h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</li><li>过滤器的作用：<ul><li>一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤。..</li></ul></li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>定义一个类，实现接口 Filter</li><li>复写方法</li><li>配置拦截路径<ol><li>web.xml</li><li>注解</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//访问所有资源之前，都会执行该过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filterDemo1 被执行了。..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="过滤器细节"><a href="#过滤器细节" class="headerlink" title="过滤器细节"></a>过滤器细节</h3><h4 id="web-xml-配置"><a href="#web-xml-配置" class="headerlink" title="web.xml 配置"></a>web.xml 配置</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>cn.itcast.web.filter.FilterDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 拦截路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><h4 id="过滤器执行流程"><a href="#过滤器执行流程" class="headerlink" title="过滤器执行流程"></a>过滤器执行流程</h4><ol><li>执行过滤器</li><li>执行放行后的资源</li><li>回来执行过滤器放行代码下边的代码</li></ol><h3 id="过滤器生命周期"><a href="#过滤器生命周期" class="headerlink" title="过滤器生命周期"></a>过滤器生命周期</h3><ol><li>init: 在服务器启动后，会创建 Filter 对象，然后调用 init 方法。只执行一次，用于加载资源。</li><li>doFilter: 每一次请求被拦截资源时都会执行。执行多次。</li><li>destroy: 在服务器关闭后，Filter 对象被销毁。如果服务器是正常关闭，则会执行 destroy 方法。只执行一次，一般用于释放资源。</li></ol><h4 id="过滤器配置详解"><a href="#过滤器配置详解" class="headerlink" title="过滤器配置详解"></a>过滤器配置详解</h4><ul><li>拦截路径配置：<ol><li>具体资源路径： <code>/index.jsp</code> 只有访问 index.jsp 资源时，过滤器才会被执行</li><li>拦截目录： <code>/user/*</code> 访问/user 下的所有资源时，过滤器都会被执行</li><li>后缀名拦截： <code>*.jsp</code> 访问所有后缀名为 jsp 资源时，过滤器都会被执行</li><li>拦截所有资源： <code>/*</code> 访问所有资源时，过滤器都会被执行</li></ol></li><li>拦截方式配置：资源被访问的方式<ul><li>注解配置：<ul><li>设置 <code>dispatcherTypes</code> 属性<pre><code>  1. `REQUEST` ：默认值。浏览器直接请求资源  2. `FORWARD` ：转发访问资源  3. `INCLUDE` ：包含访问资源  4. `ERROR` ：错误跳转资源  5. `ASYNC` ：异步访问资源</code></pre></li></ul></li><li>web.xml 配置<ul><li>设置 <code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code> 标签即可</li></ul></li></ul></li></ul><h3 id="过滤器链（配置多个过滤器）"><a href="#过滤器链（配置多个过滤器）" class="headerlink" title="过滤器链（配置多个过滤器）"></a>过滤器链（配置多个过滤器）</h3><ul><li><p>执行顺序：如果有两个过滤器：过滤器 1 和过滤器 2</p><ol><li>过滤器 1</li><li>过滤器 2</li><li>资源执行</li><li>过滤器 2</li><li>过滤器 1</li></ol></li><li><p>过滤器先后顺序问题：</p><ol><li>注解配置：按照类名的字符串比较规则比较，值小的先执行<ul><li>如： AFilter 和 BFilter，AFilter 就先执行了。</li></ul></li><li>web.xml 配置： <code>&lt;filter-mapping&gt;</code> 谁定义在上边，谁先执行</li></ol></li></ul><h2 id="Listener-监听器"><a href="#Listener-监听器" class="headerlink" title="Listener 监听器"></a>Listener 监听器</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>web 的三大组件之一</p><h3 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h3><ul><li><p>事件 ：一件事情</p></li><li><p>事件源 ：事件发生的地方</p></li><li><p>监听器 ：一个对象</p></li><li><p>注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码</p></li><li><p>ServletContextListener: 监听 ServletContext 对象的创建和销毁</p></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p> <code>void contextDestroyed(ServletContextEvent sce)</code><br>ServletContext 对象被销毁之前会调用该方法<br> <code>void contextInitialized(ServletContextEvent sce)</code><br>ServletContext 对象创建后会调用该方法</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>定义一个类，实现 <code>ServletContextListener</code> 接口</li><li>复写方法</li><li>配置 web.xml</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>cn.itcast.web.listener.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span></code></pre><ul><li>指定初始化参数 <code>&lt;context-param&gt;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL 表达式和 JSTL</title>
      <link href="/2020/06/19/ELAndJSTL/"/>
      <url>/2020/06/19/ELAndJSTL/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于配置 JSP 页面，导入资源文件</p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p> <code>&lt;%@ 指令名称 属性名 1=属性值 1 属性名 2=属性值 2 ... %&gt;</code></p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="page"><a href="#page" class="headerlink" title="page"></a>page</h5><p>配置 JSP 页面</p><ul><li><code>contentType</code> ：等同于 <code>response.setContentType()</code><ol><li>设置响应体的 mime 类型以及字符集</li><li>设置当前 jsp 页面的编码（只能是高级的 IDE 才能生效，如果使用低级工具，则需要设置 pageEncoding 属性设置当前页面的字符集）</li></ol></li><li><code>import</code> ：导包</li><li><code>errorPage</code> ：当前页面发生异常后，会自动跳转到指定的错误页面</li><li><code>isErrorPage</code> ：标识当前也是是否是错误页面。<ul><li>true：是，可以使用内置对象 exception</li><li>false：否。默认值。不可以使用内置对象 exception</li></ul></li></ul><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>页面包含的。导入页面的资源文件<br> <code>&lt;%@include file=&quot;top.jsp&quot;%&gt;</code></p><h4 id="taglib"><a href="#taglib" class="headerlink" title="taglib"></a>taglib</h4><p>导入资源<br> <code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p><ul><li>prefix：前缀，自定义的</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>html 注释：</li></ol><p><code>&lt;!-- --&gt;</code> : 只能注释 html 代码片段</p><ol start="2"><li>jsp 注释：推荐使用</li></ol><p><code>&lt;%-- --%&gt;</code> ：可以注释所有</p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><ul><li><p>在 jsp 页面中不需要创建，直接使用的对象  </p></li><li><p>一共有 9 个：</p><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面共享数据，还可以获取其他八个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问的多个资源（转发）</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求间</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>page</td><td>Object</td><td>当前页面 (Servlet) 的对象  this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet 的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table></li></ul><h2 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Expression Language 表达式语言</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>替换和简化 jsp 页面中 java 代码的编写</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p> <code>${表达式}</code></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>jsp 默认支持 el 表达式，如果要忽略 el 表达式</p><ol><li>设置 jsp 中 page 指令中： <code>isELIgnored=&quot;true&quot;</code> 忽略当前 jsp 页面中所有的 el 表达式</li><li><code>\${表达式}</code> ：忽略当前这个 el 表达式</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ol><li>算数运算符： <code>+ - * /(div) %(mod)</code></li><li>比较运算符： <code>&gt; &lt; &gt;= &lt;= == !=</code></li><li>逻辑运算符： <code>&amp;&amp;(and) ||(or) !(not)</code></li><li>空运算符： <code>empty</code><ul><li>功能：用于判断字符串、集合、数组对象是否为 null 或者长度是否为 0</li><li><code>${empty list}</code> : 判断字符串、集合、数组对象是否为 null 或者长度为 0</li><li><code>${not empty str}</code> : 表示判断字符串、集合、数组对象是否不为 null 并且 长度&gt;0</li></ul></li></ol><h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><ul><li>el 表达式只能从域对象中获取值</li></ul><ol><li><p><code>${域名称。键名}</code> ：从指定域中获取指定键的值</p><ul><li>域名称：<ol><li>pageScope  –&gt; pageContext</li><li>requestScope  –&gt; request</li><li>sessionScope  –&gt; session</li><li>applicationScope –&gt; application（ServletContext）</li></ol></li><li>举例：在 request 域中存储了 name=张三</li><li>获取： <code>${requestScope.name}</code></li></ul></li><li><p><code>${键名}</code> ：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p></li><li><p>获取对象、List 集合、Map 集合的值</p><ol><li><p>对象： <code>${域名称。键名。属性名}</code></p><ul><li>本质上会去调用对象的 getter 方法</li></ul></li><li><p>List 集合：${域名称。键名 [索引]}</p></li><li><p>Map 集合：</p><ul><li><code>${域名称。键名。key 名称}</code></li><li><code>${域名称。键名 [&quot;key 名称&quot;]}</code></li></ul></li></ol></li></ol><h4 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h4><ul><li>EL 表达式中有 11 个隐式对象</li><li><code>pageContext</code> :<ul><li>获取 jsp 其他八个内置对象<ul><li><code>${pageContext.request.contextPath}</code> ：动态获取虚拟目录</li></ul></li></ul></li></ul><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>JavaServer Pages Tag Library  JSP 标准标签库<br>是由 Apache 组织提供的开源的免费的 jsp 标签  &lt;标签&gt;</p><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>用于简化和替换 jsp 页面上的 java 代码  </p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>导入 jstl 相关 jar 包</li><li>引入标签库：taglib 指令： <code>&lt;%@ taglib %&gt;</code></li><li>使用标签</li></ol><h3 id="常用的-JSTL-标签"><a href="#常用的-JSTL-标签" class="headerlink" title="常用的 JSTL 标签"></a>常用的 JSTL 标签</h3><ol><li><p><code>if</code> : 相当于 java 代码的 if 语句</p><ol><li>属性：<ul><li>test 必须属性，接受 boolean 表达式<ul><li>如果表达式为 true，则显示 if 标签体内容，如果为 false，则不显示标签体内容</li><li>一般情况下，test 属性值会结合 el 表达式一起使用</li></ul></li></ul></li><li>注意：<ul><li>c:if 标签没有 else 情况，想要 else 情况，则可以在定义一个 c:if 标签</li></ul></li></ol></li><li><p><code>choose</code> : 相当于 java 代码的 switch 语句</p><ol><li><p>使用 choose 标签声明</p><p>相当于 switch 声明</p></li><li><p>使用 when 标签做判断</p><p>相当于 case</p></li><li><p>使用 otherwise 标签做其他情况的声明</p><p>相当于 default</p></li></ol></li><li><p><code>foreach</code> : 相当于 java 代码的 for 语句</p></li></ol><h2 id="MVC-开发模式"><a href="#MVC-开发模式" class="headerlink" title="MVC 开发模式"></a>MVC 开发模式</h2><h3 id="jsp-演变历史"><a href="#jsp-演变历史" class="headerlink" title="jsp 演变历史"></a>jsp 演变历史</h3><ol><li>早期只有 servlet，只能使用 response 输出标签数据，非常麻烦</li><li>后来又 jsp，简化了 Servlet 的开发，如果过度使用 jsp，在 jsp 中即写大量的 java 代码，有写 html 表，造成难于维护，难于分工协作</li><li>再后来，java 的 web 开发，借鉴 MVC 开发模式，使得程序的设计更加合理性</li></ol><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p><img src="/images/2020-06-19T130251.png" alt="MVC 开发模式"></p><ol><li>M：Model，模型。JavaBean<ul><li>完成具体的业务操作，如：查询数据库，封装对象</li></ul></li><li>V：View，视图。JSP<ul><li>展示数据</li></ul></li><li>C：Controller，控制器。Servlet<ul><li>获取用户的输入</li><li>调用模型</li><li>将数据交给视图进行展示</li></ul></li></ol><ul><li><p>优缺点：</p><ol><li><p>优点：</p><ol><li>耦合性低，方便维护，可以利于分工协作</li><li>重用性高</li></ol></li><li><p>缺点：</p><ol><li>使得项目架构变得复杂，对开发人员要求高</li></ol></li></ol></li></ul><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p><img src="/images/2020-06-19T131333.png" alt></p><ol><li>界面层（表示层）：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</li><li>业务逻辑层：处理业务逻辑的。</li><li>数据访问层：操作数据存储文件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie 和 Session</title>
      <link href="/2020/06/18/CookieAndSession/"/>
      <url>/2020/06/18/CookieAndSession/</url>
      
        <content type="html"><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>一次会话中包含多次请求和响应。</p><ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>在一次会话的范围内的多次请求间，共享数据</p><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>客户端会话技术，将数据保存到客户端</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>创建 Cookie 对象，绑定数据  </p><p><code>new Cookie(String name, String value)</code></p></li><li><p>发送 Cookie 对象  </p><p><code>response.addCookie(Cookie cookie)</code></p></li><li><p>获取 Cookie，拿到数据  </p><p><code>Cookie[]  request.getCookies()</code></p></li></ol><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>基于响应头 set-cookie 和请求头 cookie 实现</p><h3 id="cookie-的细节"><a href="#cookie-的细节" class="headerlink" title="cookie 的细节"></a>cookie 的细节</h3><h4 id="一次可不可以发送多个-cookie"><a href="#一次可不可以发送多个-cookie" class="headerlink" title="一次可不可以发送多个 cookie"></a>一次可不可以发送多个 cookie</h4><ul><li>可以</li><li>可以创建多个 Cookie 对象，使用 response 调用多次 addCookie 方法发送 cookie 即可。</li></ul><h4 id="cookie-在浏览器中保存多长时间"><a href="#cookie-在浏览器中保存多长时间" class="headerlink" title="cookie 在浏览器中保存多长时间"></a>cookie 在浏览器中保存多长时间</h4><ol><li><p>默认情况下，当浏览器关闭后，Cookie 数据被销毁</p></li><li><p>持久化存储：  </p><p><code>setMaxAge(int seconds)</code></p><ol><li>正数：将 Cookie 数据写到硬盘的文件中。持久化存储。并指定 cookie 存活时间，时间到后，cookie 文件自动失效</li><li>负数：默认值</li><li>零：删除 cookie 信息</li></ol></li></ol><h4 id="cookie-能不能存中文"><a href="#cookie-能不能存中文" class="headerlink" title="cookie 能不能存中文"></a>cookie 能不能存中文</h4><ul><li>在 tomcat 8 之前 cookie 中不能直接存储中文数据。需要将中文数据转码—一般采用 URL 编码 (%E3)</li><li>在 tomcat 8 之后，cookie 支持中文数据。特殊字符还是不支持，建议使用 URL 编码存储，URL 解码解析</li></ul><h4 id="cookie-共享问题"><a href="#cookie-共享问题" class="headerlink" title="cookie 共享问题"></a>cookie 共享问题</h4><ol><li><p>假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享？</p><ul><li><p>默认情况下 cookie 不能共享</p></li><li><p><code>setPath(String path)</code> : 设置 cookie 的获取范围。默认情况下，设置当前的虚拟目录  </p><p>如果要共享，则可以将 path 设置为”/“</p></li></ul></li><li><p>不同的 tomcat 服务器间 cookie 共享问题？</p><ul><li><code>setDomain(String path)</code> : 如果设置一级域名相同，那么多个服务器之间 cookie 可以共享  </li></ul></li></ol><p><code>setDomain(&quot;.baidu.com&quot;)</code> , 那么 tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享</p><h3 id="Cookie-的特点和作用"><a href="#Cookie-的特点和作用" class="headerlink" title="Cookie 的特点和作用"></a>Cookie 的特点和作用</h3><ol><li>cookie 存储数据在客户端浏览器</li><li>浏览器对于单个 cookie 的大小有限制 (4kb) 以及 对同一个域名下的总 cookie 数量也有限制 (20 个）</li></ol><ul><li>作用：<ol><li>cookie 一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol></li></ul><h2 id="JSP-入门"><a href="#JSP-入门" class="headerlink" title="JSP 入门"></a>JSP 入门</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>Java Server Pages： java 服务器端页面<ul><li>可以理解为：一个特殊的页面，其中既可以指定定义 html 标签，又可以定义 java 代码</li><li>用于简化书写！！！</li></ul></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>JSP 本质上就是一个 Servlet<br><img src="/images/2020-06-19T001909.png" alt></p><h3 id="JSP-的脚本"><a href="#JSP-的脚本" class="headerlink" title="JSP 的脚本"></a>JSP 的脚本</h3><p>JSP 定义 Java 代码的方式</p><ol><li><code>&lt;%  代码 %&gt;</code> ：定义的 java 代码，在 service 方法中。service 方法中可以定义什么，该脚本中就可以定义什么。</li><li><code>&lt;%! 代码 %&gt;</code> ：定义的 java 代码，在 jsp 转换后的 java 类的成员位置。</li><li><code>&lt;%= 代码 %&gt;</code> ：定义的 java 代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li></ol><h3 id="JSP-的内置对象"><a href="#JSP-的内置对象" class="headerlink" title="JSP 的内置对象"></a>JSP 的内置对象</h3><ul><li><p>在 jsp 页面中不需要获取和创建，可以直接使用的对象</p></li><li><p>jsp 一共有 9 个内置对象</p><ul><li><p>request</p></li><li><p>response</p></li><li><p>out：字符输出流对象。可以将数据输出到页面上。和 <code>response.getWriter()</code> 类似</p><blockquote><p><code>response.getWriter()</code> 和 <code>out.write()</code> 的区别：  </p><ul><li>在 tomcat 服务器真正给客户端做出响应之前，会先找 response 缓冲区数据，再找 out 缓冲区数据。</li><li><code>response.getWriter()</code> 数据输出永远在 <code>out.write()</code> 之前</li></ul></blockquote></li></ul></li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>获取 HttpSession 对象：  </p><p><code>HttpSession session = request.getSession();</code></p></li><li><p>使用 HttpSession 对象：  </p><p><code>Object getAttribute(String name)</code><br><code>void setAttribute(String name, Object value)</code><br><code>void removeAttribute(String name)</code></p></li><li><p>原理</p></li></ol><p>Session 的实现是依赖于 Cookie 的。</p><p><img src="/images/2020-06-19T002012.png" alt="2020-06-19T002012"></p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><h4 id="当客户端关闭后，服务器不关闭，两次获取-session-是否为同一个"><a href="#当客户端关闭后，服务器不关闭，两次获取-session-是否为同一个" class="headerlink" title="当客户端关闭后，服务器不关闭，两次获取 session 是否为同一个"></a>当客户端关闭后，服务器不关闭，两次获取 session 是否为同一个</h4><ul><li>默认情况下。不是。</li><li>如果需要相同，则可以创建 Cookie, 键为 JSESSIONID，设置最大存活时间，让 cookie 持久化保存。</li></ul><pre class=" language-java"><code class="language-java">Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="客户端不关闭，服务器关闭后，两次获取的-session-是同一个吗"><a href="#客户端不关闭，服务器关闭后，两次获取的-session-是同一个吗" class="headerlink" title="客户端不关闭，服务器关闭后，两次获取的 session 是同一个吗"></a>客户端不关闭，服务器关闭后，两次获取的 session 是同一个吗</h4><ul><li>不是同一个，但是要确保数据不丢失。tomcat 自动完成以下工作<ul><li>session 的钝化：<ul><li>在服务器正常关闭之前，将 session 对象系列化到硬盘上</li></ul></li><li>session 的活化：<ul><li>在服务器启动后，将 session 文件转化为内存中的 session 对象即可。</li></ul></li></ul></li></ul><h4 id="session-什么时候被销毁"><a href="#session-什么时候被销毁" class="headerlink" title="session 什么时候被销毁"></a>session 什么时候被销毁</h4><ol><li><p>服务器关闭</p></li><li><p>session 对象调用 <code>invalidate()</code> 。</p></li><li><p>session 默认失效时间 30 分钟</p><p> 选择性配置修改</p></li></ol><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span>    ```#### session 的特点1. session 用于存储一次会话的多次请求的数据，存在服务器端2. session 可以存储任意类型，任意大小的数据#### session 与 Cookie 的区别1. session 存储数据在服务器端，Cookie 在客户端2. session 没有数据大小限制，Cookie 有3. session 数据安全，Cookie 相对于不安全</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Response 对象</title>
      <link href="/2020/06/18/ResponseObj/"/>
      <url>/2020/06/18/ResponseObj/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2020-06-18T235353.png" alt="request&amp;response 对象原理"></p><h2 id="HTTP-响应消息"><a href="#HTTP-响应消息" class="headerlink" title="HTTP 响应消息"></a>HTTP 响应消息</h2><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><ol><li>组成：协议/版本 响应状态码 状态码描述</li><li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。<ul><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送 1xx 多状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302（重定向），304（访问缓存）</li><li>4xx：客户端错误。<ul><li>404（请求路径没有对应的资源）</li><li>405 请求方式没有对应的 doXxx 方法</li></ul></li><li>5xx：服务器端错误。代表：500（服务器内部出现异常）</li></ul></li></ol><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><ol><li>格式： <code>头名称：值</code></li><li>常见的响应头：<ol><li><code>Content-Type</code> ：服务器告诉客户端本次响应体数据格式以及编码格式</li><li><code>Content-disposition</code> ：服务器告诉客户端以什么格式打开响应体数据<ul><li><code>in-line</code> : 默认值，在当前页面内打开</li><li><code>attachment;filename=xxx</code> ：以附件形式打开响应体。文件下载</li></ul></li></ol></li></ol><h3 id="响应空行"><a href="#响应空行" class="headerlink" title="响应空行"></a>响应空行</h3><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>传输的数据</p><h3 id="响应字符串格式"><a href="#响应字符串格式" class="headerlink" title="响应字符串格式"></a>响应字符串格式</h3><pre class=" language-html"><code class="language-html">HTTP/1.1 200 OKContent-Type: text/html;charset=UTF-8Content-Length: 101Date: Wed, 06 Jun 2018 07:08:42 GMT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    hello , response<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="response-对象"><a href="#response-对象" class="headerlink" title="response 对象"></a>response 对象</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="设置响应消息"><a href="#设置响应消息" class="headerlink" title="设置响应消息"></a>设置响应消息</h4><ol><li>设置响应行<ol><li>格式： <code>HTTP/1.1 200 OK</code></li><li>设置状态码： <code>setStatus(int sc)</code></li></ol></li><li>设置响应头： <code>setHeader(String name, String value)</code></li><li>设置响应体：<ol><li>获取输出流<ul><li>字符输出流： <code>PrintWriter getWriter()</code></li><li>字节输出流： <code>ServletOutputStream getOutputStream()</code></li></ul></li><li>使用输出流，将数据输出到客户端浏览器</li></ol></li></ol><h4 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 设置状态码为 302</span>response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 设置响应头 location</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"location"</span><span class="token punctuation">,</span><span class="token string">"/day15/responseDemo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//简单的重定向方法</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/day15/responseDemo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="forward-和-redirect-区别"><a href="#forward-和-redirect-区别" class="headerlink" title="forward 和  redirect 区别"></a>forward 和  redirect 区别</h3><ul><li>重定向的特点：redirect<ol><li>地址栏发生变化</li><li>重定向可以访问其他站点（服务器）的资源</li><li>重定向是两次请求。不能使用 request 对象来共享数据</li></ol></li><li>转发的特点：forward<ol><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用 request 对象来共享数据</li></ol></li></ul><ul><li>服务器输出字符数据到浏览器<ul><li>步骤：<pre><code>1. 获取字符输出流2. 输出数据</code></pre></li><li>乱码问题：<pre><code>1. `PrintWriter pw = response.getWriter();` 获取的流的默认编码是 ISO-8859-12. 设置该流的默认编码3. 告诉浏览器响应体使用的编码</code></pre></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//简单的形式，设置编码，是在获取流之前设置</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ServletContext-对象"><a href="#ServletContext-对象" class="headerlink" title="ServletContext 对象"></a>ServletContext 对象</h2><p>代表整个 web 应用，可以和程序的容器（服务器）来通信</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><ol><li><p>通过 request 对象获取  </p><p><code>request.getServletContext();</code></p></li><li><p>通过 HttpServlet 获取  </p><p><code>this.getServletContext();</code></p></li></ol><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ol><li><p>获取 MIME 类型：</p><p><code>String getMimeType(String file)</code></p></li><li><p>域对象：共享数据</p><ol><li><code>setAttribute(String name,Object value)</code></li><li><code>getAttribute(String name)</code></li><li><code>removeAttribute(String name)</code><blockquote><p>ServletContext 对象范围：所有用户所有请求的数据</p></blockquote></li></ol></li><li><p>获取文件的真实（服务器）路径 <code>String getRealPath(String path)</code></p></li></ol><pre class=" language-java"><code class="language-java">String b <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//web 目录下资源访问</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>String c <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//WEB-INF 目录下的资源访问</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>String a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//src 目录下的资源访问</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request 对象</title>
      <link href="/2020/06/18/RequestObj/"/>
      <url>/2020/06/18/RequestObj/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="Servlet-的体系结构"><a href="#Servlet-的体系结构" class="headerlink" title="Servlet 的体系结构"></a>Servlet 的体系结构</h3><pre><code>Servlet -- 接口    |GenericServlet -- 抽象类    |HttpServlet  -- 抽象类</code></pre><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><p>将 Servlet 接口中其他的方法做了默认空实现，只将 service() 方法作为抽象。<br>将来定义 Servlet 类时，可以继承 GenericServlet，实现 service() 方法即可</p><h4 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h4><p>对 http 协议的一种封装，简化操作</p><ol><li>定义类继承 HttpServlet</li><li>复写 doGet/doPost 方法</li></ol><h3 id="Servlet-相关配置"><a href="#Servlet-相关配置" class="headerlink" title="Servlet 相关配置"></a>Servlet 相关配置</h3><p><code>urlpartten</code> : Servlet 访问路径  </p><ul><li><p>一个 Servlet 可以定义多个访问路径：</p><p><code>@WebServlet({&quot;/d4&quot;,&quot;/dd4&quot;,&quot;/ddd4&quot;})</code></p></li><li><p>路径定义规则：</p><ol><li><code>/xxx</code> ：路径匹配</li><li><code>/xxx/xxx</code> : 多层路径，目录结构</li><li><code>*.do</code> ：扩展名匹配</li></ol></li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><p>HTTP 协议有 7 中请求方式，常用的有 2 种</p><ul><li>GET：<ol><li>请求参数在请求行中，在 url 后。</li><li>请求的 url 长度有限制的</li><li>不太安全</li></ol></li><li>POST：<ol><li>请求参数在请求体中</li><li>请求的 url 长度没有限制的</li><li>相对安全</li></ol></li></ul><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>客户端浏览器告诉服务器一些信息<br>请求头名称：请求头值<br>常见的请求头：</p><ol><li><p>User-Agent：浏览器版本信息</p><ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li><li><p>Referer：<a href="http://localhost/login.html" target="_blank" rel="noopener">http://localhost/login.html</a></p><ol><li>防盗链</li><li>统计工作</li></ol></li><li><p>请求空行  </p><p> 空行，就是用于分割 POST 请求的请求头，和请求体的。</p></li><li><p>请求体（正文）：</p><ul><li>封装 POST 请求消息的请求参数的</li></ul></li></ol><pre><code>POST /login.html HTTP/1.1Host: localhostUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://localhost/login.htmlConnection: keep-aliveUpgrade-Insecure-Requests: 1</code></pre><h2 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>request 和 response 对象是由服务器创建的。我们来使用它们</li><li>request 对象是来获取请求消息，response 对象是来设置响应消息</li></ol><h3 id="继承结构"><a href="#继承结构" class="headerlink" title="继承结构"></a>继承结构</h3><pre><code>ServletRequest  -- 接口    | 继承HttpServletRequest -- 接口    | 实现org.apache.catalina.connector.RequestFacade 类 (tomcat)</code></pre><h3 id="request-功能"><a href="#request-功能" class="headerlink" title="request 功能"></a>request 功能</h3><p> <code>GET /day14/demo1?name=zhangsan HTTP/1.1</code></p><ol><li><p>获取请求方式 ：GET</p><ul><li><code>String getMethod()</code></li></ul></li><li><p>获取虚拟目录：/day14</p><ul><li><code>String getContextPath()</code></li></ul></li><li><p>获取 Servlet 路径：/demo1</p><ul><li><code>String getServletPath()</code></li></ul></li><li><p>获取 get 方式请求参数：name=zhangsan</p><ul><li><code>String getQueryString()</code></li></ul></li><li><p>获取请求 URI：/day14/demo1</p><ul><li><code>String getRequestURI()</code> : <code>/day14/demo1</code></li><li><code>StringBuffer getRequestURL()</code> : <code>http://localhost/day14/demo1</code></li><li>URL: 统一资源定位符： <code>http://localhost/day14/demo1</code></li><li>URI：统一资源标识符： <code>/day14/demo1</code></li></ul></li><li><p>获取协议及版本：HTTP/1.1</p><ul><li><code>String getProtocol()</code></li></ul></li><li><p>获取客户机的 IP 地址：</p><ul><li><code>String getRemoteAddr()</code></li></ul></li><li><p>获取请求头数据</p><ul><li><code>String getHeader(String name)</code> : 通过请求头的名称获取请求头的值</li><li><code>Enumeration&lt;String&gt; getHeaderNames()</code> : 获取所有的请求头名称</li></ul></li><li><p>获取请求体数据：</p><ul><li>请求体：只有 POST 请求方式，才有请求体，在请求体中封装了 POST 请求的请求参数</li></ul><ol><li><p>获取流对象</p><ul><li><code>BufferedReader getReader()</code> ：获取字符输入流，只能操作字符数据</li><li><code>ServletInputStream getInputStream()</code> ：获取字节输入流，可以操作所有类型数据</li></ul></li><li><p>再从流对象中拿数据</p></li></ol></li></ol><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><h4 id="获取请求参数通用方式"><a href="#获取请求参数通用方式" class="headerlink" title="获取请求参数通用方式"></a>获取请求参数通用方式</h4><p>不论 get 还是 post 请求方式都可以使用下列方法来获取请求参数</p><ol><li><p><code>String getParameter(String name)</code> : 根据参数名称获取参数值  </p><p> username=zs&amp;password=123</p></li><li><p><code>String[] getParameterValues(String name)</code> : 根据参数名称获取参数值的数组  </p><p> hobby=xx&amp;hobby=game</p></li><li><p><code>Enumeration&lt;String&gt; getParameterNames()</code> : 获取所有请求的参数名称</p></li><li><p><code>Map&lt;String,String[]&gt; getParameterMap()</code> : 获取所有参数的 map 集合</p></li></ol><ul><li><p>中文乱码问题：</p><ul><li>get 方式：tomcat 8 已经将 get 方式乱码问题解决了</li><li>post 方式：在获取参数前，设置 request 的编码  </li></ul><p><code>request.setCharacterEncoding(&quot;utf-8&quot;);</code></p></li></ul><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><p>一种在服务器内部的资源跳转方式</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li><p>通过 <code>request</code> 对象获取请求转发器对象：  </p><p><code>RequestDispatcher getRequestDispatcher(String path)</code></p></li><li><p>使用 <code>RequestDispatcher</code> 对象来进行转发：</p><p><code>forward(ServletRequest request, ServletResponse response)</code></p></li></ol><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中。</li><li>转发是一次请求</li></ol><h4 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h4><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request 域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li><li>方法：<ol><li><code>void setAttribute(String name,Object obj)</code> : 存储数据</li><li><code>Object getAttitude(String name)</code> : 通过键获取值</li><li><code>void removeAttribute(String name)</code> : 通过键移除键值对</li></ol></li></ul><h4 id="获取-ServletContext"><a href="#获取-ServletContext" class="headerlink" title="获取 ServletContext"></a>获取 <code>ServletContext</code></h4><p> <code>ServletContext getServletContext()</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 和 Servlet 基础</title>
      <link href="/2020/06/18/TomcatServletBase/"/>
      <url>/2020/06/18/TomcatServletBase/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-相关概念"><a href="#Web-相关概念" class="headerlink" title="Web 相关概念"></a>Web 相关概念</h2><h3 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h3><ol><li>C/S：客户端/服务器端</li><li>B/S：浏览器/服务器端</li></ol><h3 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h3><ol><li>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源。静态资源可以直接被浏览器解析<ul><li>如： html,css,JavaScript</li></ul></li><li>动态资源：每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器<ul><li>如：servlet/jsp,php,asp….</li></ul></li></ol><h2 id="Web-服务器软件"><a href="#Web-服务器软件" class="headerlink" title="Web 服务器软件"></a>Web 服务器软件</h2><p>常见的 java 相关的 web 服务器软件：</p><ul><li>webLogic：oracle 公司，大型的 JavaEE 服务器，支持所有的 JavaEE 规范，收费的。</li><li>webSphere：IBM 公司，大型的 JavaEE 服务器，支持所有的 JavaEE 规范，收费的。</li><li>JBOSS：JBOSS 公司的，大型的 JavaEE 服务器，支持所有的 JavaEE 规范，收费的。</li><li>Tomcat：Apache 基金组织，中小型的 JavaEE 服务器，仅仅支持少量的 JavaEE 规范 servlet/jsp。开源的，免费的。</li></ul><h4 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h4><p>Java 语言在企业级开发中使用的技术规范的总和，一共规定了 13 项大的规范</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>Web 服务器软件</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>解压压缩包即可。  </p><blockquote><p>注意：安装目录建议不要有中文和空格</p></blockquote><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li>bin/startup.bat , 双击运行该文件即可</li><li>访问：浏览器输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></li></ul><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><ol><li><p>黑窗口一闪而过：</p><ul><li>原因： 没有正确配置 JAVA_HOME 环境变量</li><li>解决方案：正确配置 JAVA_HOME 环境变量</li></ul></li><li><p>启动报错：</p><ol><li>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程<ul><li><code>netstat -ano</code></li></ul></li><li>温柔：修改自身的端口号</li></ol><p><code>conf/server.xml</code></p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8888<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>    <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>    <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8445<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><h4 id="正常关闭"><a href="#正常关闭" class="headerlink" title="正常关闭"></a>正常关闭</h4><ul><li>bin/shutdown.bat  </li><li>ctrl+c</li></ul><h4 id="强制关闭"><a href="#强制关闭" class="headerlink" title="强制关闭"></a>强制关闭</h4><p>点击启动窗口的×</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="部署项目的方式"><a href="#部署项目的方式" class="headerlink" title="部署项目的方式"></a>部署项目的方式</h4><ol><li><p>直接将项目放到 webapps 目录下即可。</p><ul><li>/hello：项目的访问路径–&gt;虚拟目录</li><li>简化部署：将项目打成一个 war 包，再将 war 包放置到 webapps 目录下。<ul><li>war 包会自动解压缩</li></ul></li></ul></li><li><p>配置 <code>conf/server.xml</code> 文件</p><p> 在 <code>&lt;Host&gt;</code> 标签体中配置</p><p><code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot; /&gt;</code><br> *docBase: 项目存放的路径</p><ul><li>path：虚拟目录</li></ul></li><li><p>在 <code>conf\Catalina\localhost</code> 创建任意名称的 xml 文件。在文件中编写</p><p><code>&lt;Context docBase=&quot;D:\hello&quot; /&gt;</code></p><ul><li>虚拟目录：xml 文件的名称</li></ul></li></ol><h4 id="java-动态项目的目录结构"><a href="#java-动态项目的目录结构" class="headerlink" title="java 动态项目的目录结构"></a>java 动态项目的目录结构</h4><pre><code>-- 项目的根目录    -- WEB-INF 目录：        -- web.xml：web 项目的核心配置文件        -- classes 目录：放置字节码文件的目录        -- lib 目录：放置依赖的 jar 包</code></pre><p><img src="/images/2020-06-18T221243.png" alt></p><h2 id="Servlet-Server-Applet"><a href="#Servlet-Server-Applet" class="headerlink" title="Servlet:  Server Applet"></a>Servlet:  Server Applet</h2><ul><li>概念：运行在服务器端的小程序</li><li>Servlet 就是一个接口，定义了 Java 类被浏览器访问到 (tomcat 识别）的规则。</li><li>将来我们自定义一个类，实现 Servlet 接口，复写方法。</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>创建 JavaEE 项目</p></li><li><p>定义一个类，实现 Servlet 接口  </p><p><code>public class ServletDemo1 implements Servlet</code></p></li><li><p>实现接口中的抽象方法</p></li><li><p>配置 Servlet  </p><p> 在 web.xml 中配置：</p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置 Servlet --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.itcast.web.servlet.ServletDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><h3 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h3><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求 URL 路径，获取访问的 Servlet 的资源路径</li><li>查找 web.xml 文件，是否有对应的 <code>&lt;url-pattern&gt;</code> 标签体内容。</li><li>如果有，则在找到对应的 <code>&lt;servlet-class&gt;</code> 全类名</li><li>tomcat 会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol><p><img src="/images/2020-06-18T223910.png" alt></p><h3 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h3><ol><li>被创建：执行 <code>init</code> 方法，只执行一次</li></ol><ul><li><p>Servlet 什么时候被创建？</p><ul><li>默认情况下，第一次被访问时，Servlet 被创建</li><li>可以配置执行 Servlet 的创建时机。<ul><li>在 <code>&lt;servlet&gt;</code> 标签下配置<ol><li>第一次被访问时，创建： <code>&lt;load-on-startup&gt;</code> 的值为负数</li><li>在服务器启动时，创建： <code>&lt;load-on-startup&gt;</code> 的值为 0 或正整数</li></ol></li></ul></li></ul></li><li><p>Servlet 的 <code>init</code> 方法，只执行一次，说明一个 Servlet 在内存中只存在一个对象，Servlet 是单例的</p><ul><li>多个用户同时访问时，可能存在线程安全问题。</li><li>解决：尽量不要在 Servlet 中定义成员变量。即使定义了成员变量，也不要对修改值</li></ul></li></ul><ol start="2"><li><p>提供服务：执行 <code>service</code> 方法，执行多次</p><ul><li>每次访问 Servlet 时，Service 方法都会被调用一次。</li></ul></li><li><p>被销毁：执行 <code>destroy</code> 方法，只执行一次</p><ul><li>Servlet 被销毁时执行。服务器关闭时，Servlet 被销毁</li><li>只有服务器正常关闭时，才会执行 destroy 方法。</li><li>destroy 方法在 Servlet 被销毁之前执行，一般用于释放资源</li></ul></li></ol><h3 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h3><p>支持注解配置。可以不需要 web.xml 了。</p><ol><li>创建 JavaEE 项目，选择 Servlet 的版本 3.0 以上，可以不创建 web.xml</li><li>定义一个类，实现 Servlet 接口</li><li>复写方法</li><li>在类上使用 <code>@WebServlet</code> 注解，进行配置</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"资源路径"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">WebServlet</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于&lt;Servlet-name></span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代表 urlPatterns() 属性配置</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">urlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于&lt;url-pattern></span>    <span class="token keyword">int</span> <span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于&lt;load-on-startup></span>    WebInitParam<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">asyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    String <span class="token function">smallIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">largeIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2020/06/18/JDBC/"/>
      <url>/2020/06/18/JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Java DataBase Connectivity  Java 数据库连接， Java 语言操作数据库  </p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>其实是官方（sun 公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动 jar 包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动 jar 包中的实现类。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>导入驱动 jar 包 mysql-connector-java-5.1.37-bin.jar<ol><li>复制 mysql-connector-java-5.1.37-bin.jar 到项目的 libs 目录下</li><li>右键–&gt;Add As Library</li></ol></li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义 sql</li><li>获取执行 sql 语句的对象 Statement</li><li>执行 sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 导入驱动 jar 包</span><span class="token comment" spellcheck="true">//2. 注册驱动</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 获取数据库连接对象</span>Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db3"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4. 定义 sql 语句</span>String sql <span class="token operator">=</span> <span class="token string">"update account set balance = 500 where id = 1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5. 获取执行 sql 的对象 Statement</span>Statement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6. 执行 sql</span><span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//7. 处理结果</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//8. 释放资源</span>stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="JDBC-各个对象"><a href="#JDBC-各个对象" class="headerlink" title="JDBC 各个对象"></a>JDBC 各个对象</h2><h3 id="DriverManager：驱动管理对象"><a href="#DriverManager：驱动管理对象" class="headerlink" title="DriverManager：驱动管理对象"></a>DriverManager：驱动管理对象</h3><ol><li>注册驱动：告诉程序该使用哪一个数据库驱动 jar  </li></ol><p><code>static void registerDriver(Driver driver)</code> : 注册与给定的驱动程序 DriverManager 。  </p><pre><code>写代码使用： `Class.forName(&quot;com.mysql.jdbc.Driver&quot;);`通过查看源码发现：在 `com.mysql.jdbc.Driver` 类中存在静态代码块</code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre><code>注意：mysql5 之后的驱动 jar 包可以省略注册驱动的步骤。</code></pre><ol start="2"><li>获取数据库连接：<ul><li>方法： <code>static Connection getConnection(String url, String user, String password)</code></li><li>参数：<ul><li>url：指定连接的路径<ul><li>语法：jdbc:mysql://ip 地址（域名）: 端口号/数据库名称</li><li>例子： <code>jdbc:mysql://localhost:3306/db3</code></li><li>细节：如果连接的是本机 mysql 服务器，并且 mysql 服务默认端口是 3306，则 url 可以简写为： <code>jdbc:mysql:///数据库名</code></li></ul></li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ol><h3 id="Connection：数据库连接对象"><a href="#Connection：数据库连接对象" class="headerlink" title="Connection：数据库连接对象"></a>Connection：数据库连接对象</h3><ol><li>获取执行 sql 的对象<ul><li><code>Statement createStatement()</code></li><li><code>PreparedStatement prepareStatement(String sql)</code></li></ul></li><li>管理事务：<ul><li>开启事务： <code>setAutoCommit(boolean autoCommit)</code> ：调用该方法设置参数为 false，即开启事务</li><li>提交事务： <code>commit()</code></li><li>回滚事务： <code>rollback()</code></li></ul></li></ol><h3 id="Statement：执行-sql-的对象"><a href="#Statement：执行-sql-的对象" class="headerlink" title="Statement：执行 sql 的对象"></a>Statement：执行 sql 的对象</h3><ol><li>执行 sql<ol><li><code>boolean execute(String sql)</code> ：可以执行任意的 sql</li><li><code>int executeUpdate(String sql)</code> ：执行 DML（insert、update、delete）语句、DDL(create，alter、drop) 语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断 DML 语句是否执行成功 返回值&gt;0 的则执行成功，反之，则失败。</li></ul></li><li><code>ResultSet executeQuery(String sql)</code> ：执行 DQL（select) 语句</li></ol></li><li>练习：<ol><li>account 表 添加一条记录</li><li>account 表 修改记录</li><li>account 表 删除一条记录</li></ol></li></ol><pre class=" language-java"><code class="language-java">    Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 定义 sql</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into account values(null,'王五',3000)"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 获取 Connection 对象</span>        conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///db3"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 获取执行 sql 的对象 Statement</span>        stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 执行 sql</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//影响的行数</span>        <span class="token comment" spellcheck="true">//6. 处理结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//stmt.close();</span>        <span class="token comment" spellcheck="true">//7. 释放资源</span>        <span class="token comment" spellcheck="true">//避免空指针异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="ResultSet：结果集对象，封装查询结果"><a href="#ResultSet：结果集对象，封装查询结果" class="headerlink" title="ResultSet：结果集对象，封装查询结果"></a>ResultSet：结果集对象，封装查询结果</h3><p><code>boolean next()</code> : 游标向下移动一行，判断当前行是否是最后一行末尾（是否有数据），如果是，则返回 false，如果不是则返回 true<br><code>getXxx（参数）</code> : 获取数据</p><ul><li>Xxx：代表数据类型   如： <code>int getInt()</code> , <code>String getString()</code></li><li>参数：<ol><li>int：代表列的编号，从 1 开始   如： <code>getString(1)</code></li><li>String：代表列名称。 如： <code>getDouble(&quot;balance&quot;)</code></li></ol></li><li>使用步骤：<ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据</li></ol></li></ul><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//循环判断游标是否是最后一行末尾。</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取数据</span>        <span class="token comment" spellcheck="true">//6.2 获取数据</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> balance <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="PreparedStatement：执行-sql-的对象"><a href="#PreparedStatement：执行-sql-的对象" class="headerlink" title="PreparedStatement：执行 sql 的对象"></a>PreparedStatement：执行 sql 的对象</h3><h4 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h4><p>在拼接 sql 时，有一些 sql 的特殊关键字参与字符串的拼接。会造成安全性问题</p><ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a</li><li>sql： <code>select * from user where username = &#39;fhdsjkf&#39; and password = &#39;a&#39; or &#39;a&#39; = &#39;a&#39;</code></li></ol><h4 id="解决-sql-注入"><a href="#解决-sql-注入" class="headerlink" title="解决 sql 注入"></a>解决 sql 注入</h4><p>使用 PreparedStatement 对象来解决<br>预编译的 SQL：参数使用 ？作为占位符  </p><ul><li>步骤：</li></ul><ol><li>导入驱动 jar 包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义 sql<ul><li>注意：sql 的参数使用？作为占位符。 如： <code>select * from user where username = ? and password = ?;</code></li></ul></li><li>获取执行 sql 语句的对象 <code>PreparedStatement  Connection.prepareStatement(String sql)</code></li><li>给？赋值：<ul><li>方法： setXxx（参数 1, 参数 2)<ul><li>参数 1：？的位置编号 从 1 开始</li><li>参数 2：？的值</li></ul></li></ul></li><li>执行 sql，接受返回结果，不需要传递 sql 语句</li><li>处理结果</li><li>释放资源</li></ol><p>注意：后期都会使用 PreparedStatement 来完成增删改查的所有操作</p><ol><li>可以防止 SQL 注入</li><li>效率更高</li></ol><h2 id="JDBC-事务"><a href="#JDBC-事务" class="headerlink" title="JDBC 事务"></a>JDBC 事务</h2><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。  </p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol><h4 id="使用-Connection-对象来管理事务"><a href="#使用-Connection-对象来管理事务" class="headerlink" title="使用 Connection 对象来管理事务"></a>使用 Connection 对象来管理事务</h4><ul><li>开启事务： <code>setAutoCommit(boolean autoCommit)</code> ：调用该方法设置参数为 false，即开启事务<ul><li>在执行 sql 之前开启事务</li></ul></li><li>提交事务： <code>commit()</code><ul><li>当所有 sql 都执行完提交事务</li></ul></li><li>回滚事务： <code>rollback()</code><ul><li>在 catch 中回滚事务</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1. 获取连接</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//开启事务</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2. 定义 sql</span>            <span class="token comment" spellcheck="true">//2.1 张三 - 500</span>            String sql1 <span class="token operator">=</span> <span class="token string">"update account set balance = balance - ? where id = ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.2 李四 + 500</span>            String sql2 <span class="token operator">=</span> <span class="token string">"update account set balance = balance + ? where id = ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 获取执行 sql 对象</span>            pstmt1 <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2 <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4. 设置参数</span>            pstmt1<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt1<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5. 执行 sql</span>            pstmt1<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 手动制造异常</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            pstmt2<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//提交事务</span>            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//事务回滚</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>pstmt1<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>pstmt2<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库范式</title>
      <link href="/2020/06/17/SQLNormalForm/"/>
      <url>/2020/06/17/SQLNormalForm/</url>
      
        <content type="html"><![CDATA[<h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><h3 id="函数依赖-1"><a href="#函数依赖-1" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>A–&gt;B, 如果通过 A 属性（属性组）的值，可以确定唯一 B 属性的值。则称 B 依赖于 A  </p><blockquote><p>例如：学号–&gt;姓名。  （学号，课程名称） –&gt; 分数</p></blockquote><h3 id="完全函数依赖"><a href="#完全函数依赖" class="headerlink" title="完全函数依赖"></a>完全函数依赖</h3><p>A–&gt;B， 如果 A 是一个属性组，则 B 属性值得确定需要依赖于 A 属性组中所有的属性值。  </p><blockquote><p>例如：（学号，课程名称） –&gt; 分数</p></blockquote><h3 id="部分函数依赖"><a href="#部分函数依赖" class="headerlink" title="部分函数依赖"></a>部分函数依赖</h3><p>A–&gt;B， 如果 A 是一个属性组，则 B 属性值得确定只需要依赖于 A 属性组中某一些值即可。  </p><blockquote><p>例如：（学号，课程名称） – &gt; 姓名</p></blockquote><h3 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h3><p>A–&gt;B, B – &gt;C . 如果通过 A 属性（属性组）的值，可以确定唯一 B 属性的值，在通过 B 属性（属性组）的值可以确定唯一 C 属性的值，则称 C 传递函数依赖于 A  </p><blockquote><p>例如：学号–&gt;系名，系名–&gt;系主任</p></blockquote><h3 id="码"><a href="#码" class="headerlink" title="码"></a>码</h3><p>如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性（属性组）为该表的码</p><blockquote><p>例如：该表中码为：（学号，课程名称）</p></blockquote><ul><li>主属性：码属性组中的所有属性</li><li>非主属性：除过码属性组的属性</li></ul><h2 id="什么是范式"><a href="#什么是范式" class="headerlink" title="什么是范式"></a>什么是范式</h2><p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式。</p><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式 (4NF）和第五范式（5NF，又称完美范式）。<br>满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式 (3NF）就行了。</p><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>第一范式（1NF）：数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项。即表中的某个列有多个值时，必须拆分为不同的列。简而言之，第一范式每一列不可再拆分，称为原子性。</p><table><thead><tr><th>学号</th><th>姓名</th><th>班级</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>一年三班</td></tr><tr><td>2</td><td>李四</td><td>一年二班</td></tr><tr><td>3</td><td>王五</td><td>二年三班</td></tr></tbody></table><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>第二范式（2NF）：在满足第一范式的前提下，表中的每一个字段都完全依赖于主键。<br>所谓完全依赖是指不能存在仅依赖主键一部分的列。简而言之，第二范式就是在第一范式的基础上所有列完全依赖于主键列。当存在一个复合主键包含多个主键列的时候，才会发生不符合第二范式的情况。比如有一个主键有两个列，不能存在这样的属性，它只依赖于其中一个列，这就是不符合第二范式。</p><ul><li>第二范式的特点：</li></ul><ol><li>一张表只描述一件事情。</li><li>表中的每一列都完全依赖于主键</li></ol><ul><li><p>不符合 2NF:  </p><table><thead><tr><th><font color="red">学生证号</font></th><th>学生证名称</th><th>学生证办理时间</th><th><font color="red">借书证号</font></th><th>借书证名称</th><th>借书证办理时间</th></tr></thead></table></li><li><p>符合 2NF，分成两张表：</p><table><thead><tr><th><font color="red">学生证号</font></th><th>学生证名称</th><th>学生证办理时间</th></tr></thead></table><table><thead><tr><th><font color="red">借书证号</font></th><th>借书证名称</th><th>借书证办理时间</th></tr></thead></table></li></ul><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>第三范式（3NF）：在满足第二范式的前提下，表中的每一列都直接依赖于主键，而不是通过其它的列来间接依赖于主键。<br>简而言之，第三范式就是所有列不依赖于其它非主键列，也就是在满足 2NF 的基础上，任何非主列不得传递依赖于主键。所谓传递依赖，指的是如果存在”A-&gt;B-&gt;C”的决定关系，则 C 传递依赖于 A。因此，满足第三范式的数据库表应该不存在如下依赖关系：主键列 -&gt; 非主键列 x -&gt; 非主键列 y  </p><ul><li><p>不符合 3NF:  </p><table><thead><tr><th><font color="red">学号</font></th><th>姓名</th><th>年龄</th><th><font color="red">所在学院</font></th><th><font color="blue">学院地点</font></th></tr></thead></table><p>  存在传递的决定关系：<br>  学号-&gt;所在学院-&gt;学院地点</p></li><li><p>符合 3NF，分成两张表：  </p><table><thead><tr><th><font color="red">学号</font></th><th>姓名</th><th>年龄</th><th><font color="darkblue">所在学院的编号（外键）</font></th></tr></thead></table><table><thead><tr><th><font color="red">学院编号</font></th><th>所在学院</th><th>学院地点</th></tr></thead></table></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>范式</th><th>特点</th></tr></thead><tbody><tr><td>1NF</td><td>原子性：表中每列不可再拆分。</td></tr><tr><td>2NF</td><td>不产生局部依赖，一张表只描述一件事情</td></tr><tr><td>3NF</td><td>不产生传递依赖，表中每一列都直接依赖于主键。而不是通过其它列间接依赖于主键。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA 反射与注解</title>
      <link href="/2020/06/12/JSPBase/"/>
      <url>/2020/06/12/JSPBase/</url>
      
        <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码<br>反射：将类的各个组成部分封装为其他对象<br>使用反射的好处：  </p><ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol><h3 id="获取-Class-对象的方式"><a href="#获取-Class-对象的方式" class="headerlink" title="获取 Class 对象的方式"></a>获取 Class 对象的方式</h3><ol><li><code>Class.forName(&quot;全类名&quot;)</code> ：将字节码文件加载进内存，返回 Class 对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li><code>类名。class</code> ：通过类名的属性 class 获取<ul><li>多用于参数的传递</li></ul></li><li><code>对象。getClass()</code> ：getClass() 方法在 Object 类中定义。<ul><li>多用于对象的获取字节码的方式  </li></ul></li></ol><p>结论：<br>同一个字节码文件 (*.class) 在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的 Class 对象都是同一个。  </p><h3 id="Class-对象功能"><a href="#Class-对象功能" class="headerlink" title="Class 对象功能"></a>Class 对象功能</h3><ul><li><p>获取功能：  </p><ol><li><p>获取成员变量</p><ul><li><code>Field[] getFields()</code> 获取所有 public 修饰的成员变量</li><li><code>Field getField(String name)</code> 获取指定名称的 public 修饰的成员变量</li><li><code>Field[] getDeclaredFields()</code> 获取所有的成员变量，不考虑修饰符</li><li><code>Field getDeclaredField(String name)</code></li></ul></li><li><p>获取构造方法</p><ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code></li><li><code>Constructor&lt;T&gt; getConstructor（类&lt;?&gt;... parameterTypes)</code></li><li><code>Constructor&lt;T&gt; getDeclaredConstructor（类&lt;?&gt;... parameterTypes)</code></li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></li></ul></li><li><p>获取成员方法</p><ul><li><code>Method[] getMethods()</code></li><li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li><li><code>Method[] getDeclaredMethods()</code></li><li><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li></ul></li><li><p>获取全类名  </p><ul><li><code>String getName()</code></li></ul></li></ol></li><li><p>Field：成员变量  </p></li><li><p>操作：</p><ol><li><p>设置值  </p><ul><li><code>void set(Object obj, Object value)</code></li></ul></li><li><p>获取值  </p><ul><li><code>get(Object obj)</code></li></ul></li><li><p>忽略访问权限修饰符的安全检查  </p><ul><li><code>setAccessible(true)</code> : 暴力反射</li></ul></li></ol></li><li><p>Constructor: 构造方法  </p></li><li><p>创建对象：</p><ul><li><code>T newInstance(Object... initargs)</code></li><li>如果使用空参数构造方法创建对象，操作可以简化：Class 对象的 <code>newInstance</code> 方法  </li></ul></li><li><p>Method：方法对象  </p></li><li><p>执行方法：  </p><ul><li><code>Object invoke(Object obj, Object... args)</code></li></ul></li><li><p>获取方法名称：</p><ul><li><code>String getName</code> : 获取方法名</li></ul></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解：说明程序的。给计算机看的<br>注释：用文字描述程序的。给程序员看的  </p><blockquote><p>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是 JDK1.5 及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p></blockquote><ul><li><p>概念描述：</p><ul><li>JDK1.5 之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul></li><li><p>作用分类：  </p><ol><li>编写文档：通过代码里标识的注解生成文档【生成文档 doc 文档】</li><li>代码分析：通过代码里标识的注解对代码进行分析【使用反射】</li><li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ol></li><li><p>JDK 中预定义的一些注解</p><ul><li><code>@Override</code> ：检测被该注解标注的方法是否是继承自父类（接口）的</li><li><code>@Deprecated</code> ：该注解标注的内容，表示已过时</li><li><code>@SuppressWarnings</code> ：压制警告<ul><li>一般传递参数 all <code>@SuppressWarnings(&quot;all&quot;)</code></li></ul></li></ul></li></ul><ul><li>自定义注解格式：</li></ul><pre class=" language-java"><code class="language-java">元注解<span class="token keyword">public</span> @<span class="token keyword">interface</span> 注解名称<span class="token punctuation">{</span>属性列表；<span class="token punctuation">}</span></code></pre><ul><li>本质：注解本质上就是一个接口，该接口默认继承 Annotation 接口  </li></ul><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyAnno</span> <span class="token keyword">extends</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Annotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li><p>属性：接口中的抽象方法</p><ul><li><p>要求：</p><ol><li><p>属性的返回值类型有下列取值</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li><p>定义了属性，在使用时需要给属性赋值</p><ol><li>如果定义属性时，使用 default 关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，并且属性的名称是 value，则 value 可以省略，直接定义值即可。</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ol></li></ol></li></ul></li><li><p>元注解：用于描述注解的注解</p><ul><li><code>@Target</code> ：描述注解能够作用的位置</li><li>ElementType 取值：<ul><li><code>TYPE</code> ：可以作用于类上</li><li><code>METHOD</code> ：可以作用于方法上</li><li><code>FIELD</code> ：可以作用于成员变量上</li></ul></li><li><code>@Retention</code> ：描述注解被保留的阶段</li><li><code>@Retention(RetentionPolicy. RUNTIME)</code> ：当前被描述的注解，会保留到 class 字节码文件中，并被 JVM 读取到</li><li><code>@Documented</code> ：描述注解是否被抽取到 api 文档中</li><li><code>@Inherited</code> ：描述注解是否被子类继承</li></ul></li><li><p>在程序使用（解析）注解：获取注解中定义的属性值</p><ol><li>获取注解定义的位置的对象  （Class,Method,Field）</li><li>获取指定的注解</li></ol><ul><li><code>getAnnotation(Class)</code><br>//其实就是在内存中生成了一个该注解接口的子类实现对象</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Pro</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"cn.itcast.annotation.Demo1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"show"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>调用注解中的抽象方法获取配置的属性值</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaBean</title>
      <link href="/2020/06/09/JavaBean/"/>
      <url>/2020/06/09/JavaBean/</url>
      
        <content type="html"><![CDATA[<p>JavaBean 是 Java 语言编写类的一种标准规范。符合 JavaBean 的类，要求类必须是具体的和公共的，并且具有无参数的构造方法，提供用来操作成员变量的 set 和 get 方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//成员变量</span>  <span class="token comment" spellcheck="true">//构造方法</span>  <span class="token comment" spellcheck="true">//无参构造方法【必须】</span>  <span class="token comment" spellcheck="true">//有参构造方法【建议】</span>  <span class="token comment" spellcheck="true">//成员方法</span>  <span class="token comment" spellcheck="true">//getXxx()</span>  <span class="token comment" spellcheck="true">//setXxx()</span><span class="token punctuation">}</span></code></pre><p>编写符合 JavaBean 规范的类，以学生类为例，标准代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//成员变量</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//构造方法</span>  <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//成员方法</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStudent</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//无参构造使用</span>  Student s<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"‐‐‐"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//带参构造使用</span>  Student s2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"赵丽颖"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"‐‐‐"</span><span class="token operator">+</span>s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Safari 使用 Opus 编码</title>
      <link href="/2020/05/25/ProvideCAFForSAfari/"/>
      <url>/2020/05/25/ProvideCAFForSAfari/</url>
      
        <content type="html"><![CDATA[<h2 id="Vorbis-与-Opus-编码"><a href="#Vorbis-与-Opus-编码" class="headerlink" title="Vorbis 与 Opus 编码"></a>Vorbis 与 Opus 编码</h2><p>摘自 Wikipedia:</p><h3 id="Vorbis"><a href="#Vorbis" class="headerlink" title="Vorbis"></a>Vorbis</h3><blockquote><p>Vorbis 是一種有損音訊壓縮格式，由 Xiph. Org 基金會所領導並開放原始碼的一個免費的開源軟件項目。該項目為有損音頻壓縮產生音頻編碼格式和軟件參考編碼器╱解碼器（編解碼器）。Vorbis 通常以 Ogg 作為容器格式，所以常合稱為 Ogg Vorbis。  </p></blockquote><p>Vorbis 是 1993 年由克里斯·蒙哥馬利開始的音頻壓縮開發的延續。1998 年 9 月，夫朗和斐協會宣布計劃收取 MP3 音頻格式的專利許可費用，该事件触发了 Vorbis 的密集开发 。Vorbis 項目是 Xiphophorus 公司的 Ogg 項目（也稱為 OggSquish 多媒體項目）的一部分。克里斯·蒙哥馬利開始了這個項目的工作，並得到越來越多的其他開發者的幫助。他們繼續改進源代碼，直到 Vorbis 文件格式在 2000 年 5 月被凍結為 1.0。原來授權為 LGPL，2001 年，Vorbis 許可證被更改為 BSD 許可證，以鼓勵採納，理查德·斯托曼參考軟件的穩定版本（1.0）於 2002 年 7 月 19 日發布 。<br>Xiph. Org 基金會維護一個參考實現編解碼器 libvorbis。還有一些微調的分支，最引人注目的是 aoTuV，提供更好的音頻質量，特別是在低比特率。這些改進會定期地合併回參考代碼庫。<br>目前 Xiph. Org 基金會建議使用延遲更低、音質更好的 Opus 編碼來取代 Vorbis。</p><h3 id="Opus"><a href="#Opus" class="headerlink" title="Opus"></a>Opus</h3><blockquote><p>Opus 是一個有損聲音編碼的格式，由 Xiph. Org 基金會開發，之後由網際網路工程任務組進行標準化，目標是希望用單一格式包含聲音和語音，取代 Speex 和 Vorbis，且適用於網路上低延遲的即時聲音傳輸，標準格式定義於 RFC 6716 文件。Opus 格式是一個開放格式，使用上沒有任何專利或限制。  </p></blockquote><p>Opus 整合了兩種聲音編碼的技術：以語音編碼為導向的 SILK 和低延遲的 CELT。Opus 可以无缝调节高低比特率。在编码器内部它在较低比特率时使用线性预测编码在高比特率时候使用变换编码（在高低比特率交界处也使用两者结合的编码方式）。Opus 具有非常低的演算法延遲（預設為 22.5 ms），非常適合用於低延遲語音通話的編碼，像是網路上的即時聲音串流、即時同步聲音旁白等等，此外 Opus 也可以透過降低編碼位元率，達成更低的演算法延遲，最低可以到 5 ms。在多個聽覺盲測中，Opus 都比 MP3、AAC、HE-AAC 等常見格式，有更低的延遲和更好的聲音壓縮率。</p><h2 id="Vorbis-与-Opus-的浏览器支持情况"><a href="#Vorbis-与-Opus-的浏览器支持情况" class="headerlink" title="Vorbis 与 Opus 的浏览器支持情况"></a>Vorbis 与 Opus 的浏览器支持情况</h2><p><img src="/images/pasted-5.png" alt="Vorbis"></p><p><img src="/images/pasted-6.jpg" alt="Opus"></p><p>音频编码 Opus 与 Vorbis 中，Safari 完全不支持 Vorbis 编码，支持 CAF 封装的 Opus 编码文件。<br>但 CAF(Core Audio Format) 是苹果的专有格式，其他浏览器并不支持。因此，想要在网页中使用 Opus 编码，需要同时准备两份文件，一份 CAF 封装，一份 Ogg 封装（.ogg 或者 .opus）。</p><h2 id="转换-Opus-格式"><a href="#转换-Opus-格式" class="headerlink" title="转换 Opus 格式"></a>转换 Opus 格式</h2><p>用 FFmpeg 可以很方便的转换 Opus 到 CAF：<br> <code>FOR %%a IN (.\*.opus) DO (&quot;ffmpeg&quot; -i &quot;%%a&quot; -c:a copy &quot;%%a.caf&quot;)</code><br>保存成批处理可以将当前文件夹下的所有 Opus 文件生成一份 caf 封装的副本。</p><h2 id="使用-Nginx-分流提供不同格式文件"><a href="#使用-Nginx-分流提供不同格式文件" class="headerlink" title="使用 Nginx 分流提供不同格式文件"></a>使用 Nginx 分流提供不同格式文件</h2><p>这样做的好处是不需要修改前端代码，代码中统一使用 Opus 或者 Ogg 格式，但 Nginx 会根据不同的浏览器返回不同文件。<br>利用 Nginx 的内置变量和 URL 重写功能，对请求的 UserAgent 进行判断，符合条件的请求会被重写。<br>因为 Nginx 不支持在一个条件中判断多个表达式和 if 语句的嵌套，只能利用自定义变量实现多条件判断。<br>对于 Safari 浏览器，如果接收的文件不是以 .caf 结尾，则必须正确指定 Content-Type 才能播放。<br>另外，对于这种改写方法，由于请求地址是一样的，必须要在 Cache-Control 中指定为 private，否则 CDN 可能缓存错误的文件，导致浏览器无法播放。</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>media<span class="token operator">/</span> <span class="token punctuation">{</span>    <span class="token keyword">root</span>   <span class="token operator">/</span>srv<span class="token operator">/</span>nginx<span class="token operator">/</span>hexo_media<span class="token operator">/</span><span class="token punctuation">;</span>    <span class="token keyword">add_header</span> Cache<span class="token operator">-</span>Control <span class="token string">"private, max-age=31536000"</span><span class="token punctuation">;</span>    <span class="token keyword">types</span> <span class="token punctuation">{</span>        audio<span class="token operator">/</span>x<span class="token operator">-</span>caf  caf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$http_user_agent</span> <span class="token operator">!</span><span class="token operator">~</span><span class="token operator">*</span> Chrome <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">"${flag}NotChrome"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$http_user_agent</span> <span class="token operator">~</span><span class="token operator">*</span> Safari <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">"${flag}IsSafari"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uri</span> <span class="token operator">~</span><span class="token operator">*</span> \<span class="token punctuation">.</span>opus$ <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">"${flag}Opus"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uri</span> <span class="token operator">~</span><span class="token operator">*</span> \<span class="token punctuation">.</span>ogg$ <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token variable">$flag</span> <span class="token string">"${flag}Ogg"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"NotChromeIsSafariOpus"</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">rewrite</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span>opus$ $<span class="token number">1</span><span class="token punctuation">.</span>opus<span class="token punctuation">.</span>caf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"NotChromeIsSafariOgg"</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">rewrite</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span>ogg$ $<span class="token number">1</span><span class="token punctuation">.</span>opus<span class="token punctuation">.</span>caf<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> Codec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Vorbis </tag>
            
            <tag> Opus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 1.19.2 with HTTP/3 编译记录</title>
      <link href="/2020/05/09/Nginx-1-18-compile/"/>
      <url>/2020/05/09/Nginx-1-18-compile/</url>
      
        <content type="html"><![CDATA[<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p><img src="/images/pasted-1.png" alt="Ubuntu 18.04"></p><p><img src="/images/1598284747746.png" alt="CentOS 8.2"></p><h2 id="安装必要软件包"><a href="#安装必要软件包" class="headerlink" title="安装必要软件包"></a>安装必要软件包</h2><pre class=" language-bash"><code class="language-bash">apt <span class="token function">install</span> build-essential cmake golang cargo mmdb-bin libmaxminddb-dev libxml2 libxslt-dev libatomic-ops-dev libunwind-dev libpcre3 libpcre3-dev</code></pre><pre class=" language-bash"><code class="language-bash">dnf <span class="token function">install</span> cmake gcc gcc-c++ golang cargo libmaxminddb-devel libxml2-devel libxslt-devel libunwind-devel pcre-devel libatomic_ops-devel</code></pre><h2 id="拉取-Nginx-和相关模块源码"><a href="#拉取-Nginx-和相关模块源码" class="headerlink" title="拉取 Nginx 和相关模块源码"></a>拉取 Nginx 和相关模块源码</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home<span class="token function">wget</span> https://nginx.org/download/nginx-1.19.2.tar.gz<span class="token function">wget</span> https://github.com/openresty/lua-nginx-module/archive/v0.10.17.tar.gz<span class="token function">wget</span> https://github.com/openresty/luajit2/archive/v2.1-20200102.tar.gz<span class="token function">wget</span> https://github.com/openresty/lua-resty-core/archive/v0.1.19.tar.gz<span class="token function">wget</span> https://github.com/openresty/lua-resty-lrucache/archive/v0.10.tar.gz<span class="token function">git</span> clone --recursive https://github.com/cloudflare/quiche<span class="token function">git</span> clone https://github.com/kn007/patch.git<span class="token function">git</span> clone https://github.com/cloudflare/zlib.git<span class="token function">git</span> clone https://github.com/google/ngx_brotli.git<span class="token function">git</span> clone https://github.com/openresty/headers-more-nginx-module.git<span class="token function">git</span> clone https://github.com/vision5/ngx_devel_kit.git<span class="token function">git</span> clone https://github.com/leev/ngx_http_geoip2_module.git<span class="token function">git</span> clone https://github.com/aperezdc/ngx-fancyindex.git<span class="token function">git</span> clone https://github.com/arut/nginx-dav-ext-module.git<span class="token function">git</span> clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git<span class="token function">cd</span> ngx_brotli<span class="token function">git</span> submodule update --init</code></pre><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home<span class="token function">tar</span> -xvf nginx-1.19.2.tar.gz<span class="token function">tar</span> -xvf lua-nginx-module-0.10.17.tar.gz<span class="token function">tar</span> -xvf luajit2-2.1-20200102.tar.gz<span class="token function">tar</span> -xvf lua-resty-core-0.1.19.tar.gz<span class="token function">tar</span> -xvf lua-resty-lrucache-0.10.tar.gz</code></pre><h2 id="编译-LUAJIT2"><a href="#编译-LUAJIT2" class="headerlink" title="编译 LUAJIT2"></a>编译 LUAJIT2</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home/luajit2-2.1-20200102<span class="token function">make</span> -j4<span class="token function">make</span> <span class="token function">install</span><span class="token function">cd</span> /home/lua-resty-lrucache-0.10<span class="token function">make</span> -j4<span class="token function">make</span> <span class="token function">install</span><span class="token function">cd</span> /home/lua-resty-core-0.1.19<span class="token function">make</span> -j4<span class="token function">make</span> <span class="token function">install</span><span class="token function">rm</span> -rf /usr/local/share/lua/5.1<span class="token function">ln</span> -s /usr/local/lib/lua /usr/local/share/lua/5.1<span class="token function">export</span> LUAJIT_INC<span class="token operator">=</span>/usr/local/include/luajit-2.1<span class="token function">export</span> LUAJIT_LIB<span class="token operator">=</span>/usr/local/lib/</code></pre><h2 id="zlib-要清除之前的编译"><a href="#zlib-要清除之前的编译" class="headerlink" title="zlib 要清除之前的编译"></a>zlib 要清除之前的编译</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /root/zlib<span class="token function">make</span> -f Makefile.in distclean</code></pre><h2 id="编译-Nginx"><a href="#编译-Nginx" class="headerlink" title="编译 Nginx"></a>编译 Nginx</h2><p>先给 Nginx 打支持 HTTP/3 和 OCSP stapling 的补丁</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /root/nginx-1.19.2patch -p1 <span class="token operator">&lt;</span> <span class="token punctuation">..</span>/patch/nginx_with_quic.patch<span class="token comment" spellcheck="true"># patch -p1 &lt; ../patch/Enable_BoringSSL_OCSP.patch</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /root/nginx-1.19.2./configure --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_brotli --with-openssl<span class="token operator">=</span><span class="token punctuation">..</span>/quiche/deps/boringssl --with-quiche<span class="token operator">=</span><span class="token punctuation">..</span>/quiche --with-http_v2_module --with-http_v3_module --with-http_ssl_module --with-http_gzip_static_module --with-http_v2_hpack_enc --with-http_realip_module --with-threads --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-zlib<span class="token operator">=</span><span class="token punctuation">..</span>/zlib --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_devel_kit --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/headers-more-nginx-module --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/lua-nginx-module-0.10.17 --with-file-aio --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_http_geoip2_module --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx-fancyindex --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/nginx-dav-ext-module --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_http_substitutions_filter_module --with-libatomic --with-http_dav_module --with-http_stub_status_module<span class="token function">make</span> -j4<span class="token function">make</span> <span class="token function">install</span></code></pre><h2 id="配置动态链接库"><a href="#配置动态链接库" class="headerlink" title="配置动态链接库"></a>配置动态链接库</h2><pre class=" language-bash"><code class="language-bash">vim /etc/ld.so.conf.d/libc.conf</code></pre><p>添加以下内容:</p><pre class=" language-conf"><code class="language-conf"># libc default configuration/usr/local/lib</code></pre><p>刷新链接缓存:</p><pre class=" language-bash"><code class="language-bash">ldconfig</code></pre><h2 id="添加-Nginx-到系统服务"><a href="#添加-Nginx-到系统服务" class="headerlink" title="添加 Nginx 到系统服务"></a>添加 Nginx 到系统服务</h2><pre class=" language-bash"><code class="language-bash">vim /lib/systemd/system/nginx.service</code></pre><p>添加以下内容:</p><pre class=" language-ini"><code class="language-ini"># Stop dance for nginx<span class="token constant">#</span> <span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span></span>## ExecStop sends SIGSTOP (graceful stop) to the nginx process.# If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control# and sends SIGTERM (fast shutdown) to the main process.# After another 5s (TimeoutStopSec<span class="token attr-value"><span class="token punctuation">=</span>5), and if nginx is alive, systemd sends</span># SIGKILL to all the remaining processes in the process group (KillMode<span class="token attr-value"><span class="token punctuation">=</span>mixed).</span>## nginx signals reference doc:# http://nginx.org/en/docs/control.html#<span class="token selector">[Unit]</span><span class="token constant">Description</span><span class="token attr-value"><span class="token punctuation">=</span>A high performance web server and a reverse proxy server</span><span class="token constant">Documentation</span><span class="token attr-value"><span class="token punctuation">=</span>man:nginx(8)</span><span class="token constant">After</span><span class="token attr-value"><span class="token punctuation">=</span>network.target</span><span class="token selector">[Service]</span><span class="token constant">Type</span><span class="token attr-value"><span class="token punctuation">=</span>forking</span><span class="token constant">PIDFile</span><span class="token attr-value"><span class="token punctuation">=</span>/run/nginx.pid</span><span class="token constant">ExecStartPre</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local/nginx/sbin/nginx -t -q -c /etc/nginx/nginx.conf</span><span class="token constant">ExecStart</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local/nginx/sbin/nginx -c /etc/nginx/nginx.conf</span><span class="token constant">ExecReload</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local/nginx/sbin/nginx -s reload</span><span class="token constant">ExecStop</span><span class="token attr-value"><span class="token punctuation">=</span>-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid</span><span class="token constant">TimeoutStopSec</span><span class="token attr-value"><span class="token punctuation">=</span>5</span><span class="token constant">KillMode</span><span class="token attr-value"><span class="token punctuation">=</span>mixed</span><span class="token selector">[Install]</span><span class="token constant">WantedBy</span><span class="token attr-value"><span class="token punctuation">=</span>multi-user.target</span></code></pre><p>创建日志文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /var/log/nginx</code></pre><p>启用 Nginx 服务</p><pre class=" language-bash"><code class="language-bash">systemctl daemon-reloadsystemctl <span class="token function">enable</span> nginx</code></pre><h2 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h2><p>Nginx 配置文件在 <code>/etc/nginx</code><br>在配置文件中添加 HTTP/3 相关配置</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># Enable QUIC and HTTP/3.</span>    <span class="token keyword">listen</span> <span class="token number">443</span> quic reuseport<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Enable HTTP/2 (optional).</span>    <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span> http2<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate</span>      cert<span class="token punctuation">.</span>crt<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate_key</span>  cert<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Enable all TLS versions (TLSv1.3 is required for QUIC).</span>    <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span> TLSv1<span class="token number">.3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Request buffering in not currently supported for HTTP/3.</span>    proxy_request_buffering off<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Add Alt-Svc header to negotiate HTTP/3.</span>    <span class="token keyword">add_header</span> alt<span class="token operator">-</span>svc <span class="token string">'h3-29=":443"; ma=86400, h3-28=":443"; ma=86400, h3-27=":443"; ma=86400'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动 Nginx</p><pre class=" language-bash"><code class="language-bash">systemctl start nginx</code></pre><h2 id="测试-HTTP-3"><a href="#测试-HTTP-3" class="headerlink" title="测试 HTTP/3"></a>测试 HTTP/3</h2><p><img src="/images/1598329086449.png" alt="查看编译参数"></p><p>安装 Firefox Nightly，在 <code>about:config</code> 中打开 <code>network.http.http3.enabled</code> 选项</p><p><img src="/images/pasted-2.png" alt="Firefox nightly"></p><p>安装 Google Chrome Canary，添加启动参数 <code>--enable-quic --quic-version=h3-27</code></p><p><img src="/images/pasted-3.png" alt="Chrome Canary"></p><p><a href="https://http3check.net/?host=azure.konata.tech" target="_blank" rel="noopener">HTTP/3 CHECK</a></p><p><img src="/images/pasted-4.png" alt="HTTP/3 CHECK"></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动 IIS inetpub 文件夹</title>
      <link href="/2020/05/06/move-inetpub/"/>
      <url>/2020/05/06/move-inetpub/</url>
      
        <content type="html"><![CDATA[<h2 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h2><p><a href="https://social.technet.microsoft.com/Forums/de-DE/7df03b2f-44fa-4cd3-b8f4-5c5e573a1295/iis-85-whats-best-way-to-move-inetpub-directory-to-another-drive?forum=winserversetup" target="_blank" rel="noopener">Move IIS to another drive</a></p><h2 id="更改-PowerShell-执行脚本策略"><a href="#更改-PowerShell-执行脚本策略" class="headerlink" title="更改 PowerShell 执行脚本策略"></a>更改 PowerShell 执行脚本策略</h2><p>运行 <code>Get-ExecutionPolicy</code> ，查看当前执行策略：</p><ul><li><code>Restricted</code> ——禁止执行脚本（Windows 默认）</li><li><code>RemoteSigned</code> ——可以执行在本机上写的脚本或者远程下载的带签名的脚本（Windows Server 默认）</li><li><code>Unrestricted</code> ——可以执行所有脚本</li></ul><p>允许执行所有脚本：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>ExecutionPolicy <span class="token operator">-</span>ExecutionPolicy Unrestricted</code></pre><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>脚本接受两个参数，第一个参数指定目标盘符，第二个参数 <code>-Force</code> 强制覆盖已存在的 inetpub 文件夹。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\Move_IIS<span class="token punctuation">.</span>ps1 D:</code></pre><h2 id="附脚本内容"><a href="#附脚本内容" class="headerlink" title="附脚本内容"></a>附脚本内容</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#// Get new drive letter from parameters</span><span class="token keyword">PARAM</span> <span class="token punctuation">(</span> <span class="token namespace">[Parameter(Mandatory=$True)]</span> <span class="token namespace">[string]</span><span class="token variable">$NewDrive</span><span class="token punctuation">,</span> <span class="token namespace">[Parameter(Mandatory=$False)]</span> <span class="token namespace">[switch]</span><span class="token variable">$Force</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#// Ensure the parameter is a sinlge character</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$NewDrive</span><span class="token punctuation">.</span>Length <span class="token operator">-ne</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$NewDrive</span> = <span class="token variable">$NewDrive</span><span class="token punctuation">.</span>Substring<span class="token punctuation">(</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#// Create variables</span><span class="token variable">$OldPath</span> = <span class="token string">"%SystemDrive%\inetpub"</span><span class="token variable">$NewPath</span> = <span class="token variable">$NewDrive</span><span class="token operator">+</span><span class="token string">":\inetpub"</span><span class="token comment" spellcheck="true">#// Check new drive actually exists</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token variable">$NewDrive</span><span class="token string">":\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Write-Host</span> <span class="token string">"ERROR:"</span><span class="token variable">$NewDrive</span><span class="token string">":\ drive does not exist, stopping"</span> <span class="token keyword">Exit</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#// Test if already exists or Force param present</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$Force</span><span class="token punctuation">)</span> <span class="token operator">-And</span> <span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token variable">$NewPath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Write-Host</span> <span class="token string">"ERROR: <span class="token variable">$NewPath</span> already exists, halting move"</span> <span class="token keyword">Exit</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#// Check IIS Installed</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Get<span class="token operator">-</span>WindowsFeature <span class="token operator">-</span>Name Web<span class="token operator">-</span>Server<span class="token punctuation">)</span><span class="token punctuation">.</span>InstallState <span class="token operator">-ne</span> <span class="token string">"Installed"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Write-Host</span> <span class="token string">"ERROR: IIS not installed, stopping"</span> <span class="token keyword">Exit</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#// stop services</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Stopping IIS"</span><span class="token variable">$StopIIS</span> = &amp;iisreset <span class="token operator">/</span>stop<span class="token comment" spellcheck="true">#// move inetpub directory</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Moving inetpub directoy to <span class="token variable">$NewPath</span>"</span><span class="token variable">$MoveFiles</span> = &amp;Robocopy C:\inetpub <span class="token variable">$NewPath</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token operator">/</span><span class="token function">MOVE</span> <span class="token operator">/</span>S <span class="token operator">/</span>E <span class="token operator">/</span>COPYALL <span class="token operator">/</span>R:0 <span class="token operator">/</span>W:0<span class="token comment" spellcheck="true">#// Add file C:\inetpub\Moved_to_Disk_$NewDrive</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Adding movedto file"</span><span class="token variable">$NewDir</span> = <span class="token function">New-Item</span> <span class="token string">"C:\inetpub"</span> <span class="token operator">-</span><span class="token function">type</span> directory<span class="token variable">$NewFile</span> = <span class="token function">Out-File</span> C:\inetpub\Moved_to_Disk_<span class="token variable">$NewDrive</span><span class="token comment" spellcheck="true">#// modify reg</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Updating Registry"</span><span class="token variable">$RegUpdate</span> = <span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\SOFTWARE\Microsoft\InetStp"</span> <span class="token operator">-</span>Name <span class="token string">"PathWWWRoot"</span> <span class="token operator">-</span>Value <span class="token variable">$NewPath</span><span class="token string">"\wwwroot"</span> <span class="token operator">-</span>PropertyType ExpandString <span class="token operator">-</span>Force<span class="token variable">$RegUpdate</span> = <span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\System\CurrentControlSet\Services\WAS\Parameters"</span> <span class="token operator">-</span>Name <span class="token string">"ConfigIsolationPath"</span> <span class="token operator">-</span>Value <span class="token variable">$NewPath</span><span class="token string">"\temp\appPools"</span> <span class="token operator">-</span>PropertyType String <span class="token operator">-</span>Force<span class="token variable">$RegUpdate</span> = <span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\SOFTWARE\Wow6432Node\Microsoft\InetStp"</span> <span class="token operator">-</span>Name <span class="token string">"PathWWWRoot"</span> <span class="token operator">-</span>Value <span class="token variable">$NewPath</span><span class="token string">"\wwwroot"</span> <span class="token operator">-</span>PropertyType ExpandString <span class="token operator">-</span>Force<span class="token comment" spellcheck="true">#// Backup and modify applicationHost.config file</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Backing up config file"</span><span class="token function">copy-item</span> C:\Windows\System32\inetsrv\config\applicationHost<span class="token punctuation">.</span>config C:\Windows\System32\inetsrv\config\applicationHost<span class="token punctuation">.</span>config<span class="token punctuation">.</span>bak<span class="token function">Start-Sleep</span> 5<span class="token comment" spellcheck="true">#// Replace "%SystemDrive%\inetpub" with $NewDrive":\inetpub"</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Updating config file"</span><span class="token punctuation">(</span><span class="token function">Get-Content</span> C:\Windows\System32\inetsrv\config\applicationHost<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"<span class="token variable">$OldPath</span>"</span><span class="token punctuation">,</span><span class="token string">"<span class="token variable">$NewPath</span>"</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">Set-Content</span> C:\Windows\System32\inetsrv\config\applicationHost<span class="token punctuation">.</span>config<span class="token comment" spellcheck="true">#// Update IIS Config</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Updating appcmd config"</span><span class="token variable">$UpdateConfig</span> = &amp;C:\Windows\system32\inetsrv\appcmd <span class="token function">set</span> config <span class="token operator">-</span>section:system<span class="token punctuation">.</span>applicationhost<span class="token operator">/</span>configHistory <span class="token operator">-</span>path:<span class="token variable">$NewPath</span>\history<span class="token comment" spellcheck="true">#// Start services</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Starting IIS"</span><span class="token variable">$StartIIS</span> = &amp;iisreset <span class="token operator">/</span><span class="token function">start</span><span class="token function">Write-Host</span> <span class="token string">"INFO: Completed"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Promise 对象</title>
      <link href="/2020/05/03/Promise/"/>
      <url>/2020/05/03/Promise/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise-的三种状态"><a href="#Promise-的三种状态" class="headerlink" title="Promise 的三种状态"></a>Promise 的三种状态</h2><ul><li>Pending</li><li>Fullfilled</li><li>Rejected</li></ul><p>Promise 的状态一旦从 Pending 变为 Fullfilled 或 Rejected，就不会再发生改变。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="创建-Promise"><a href="#创建-Promise" class="headerlink" title="创建 Promise"></a>创建 Promise</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token comment" spellcheck="true">/* 异步操作成功 */</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将结果传出</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将错误传出</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h3><p>then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 Resolved 时调用，第二个回调函数是 Promise 对象的状态变为 Rejected 时调用，第二个函数是可选的。这两个函数都接受 Promise 对象传出的值作为参数。Promise 新建后会立即执行，then 方法指定的回调函数将在当前脚本所有同步任务执行完成后才会执行。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> <span class="token string">'done'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 Promise 实现 AJAX</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> getJSON <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> handler<span class="token punctuation">;</span>        client<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"/post.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Contents: '</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ERROR'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>then 方法可以链式调用，前一个回调函数完成之后，会将返回结果作为参数传入下一个回调函数。</p><pre class=" language-js"><code class="language-js"><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"/post/1.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    post <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getJSON</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>commentURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    comments <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Resolved: "</span><span class="token punctuation">,</span> comments<span class="token punctuation">)</span><span class="token punctuation">,</span>    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Rejected: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch 方法"></a>catch 方法</h3><p>catch 方法是 then(null, rejection) 的别名，用于指定发生错误时的回调函数。建议不要在 then 方法中使用 Rejected 参数，推荐总是使用 catch 方法。如果没有 catch 方法指定错误处理的函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。</p><h3 id="all-方法"><a href="#all-方法" class="headerlink" title="all 方法"></a>all 方法</h3><p>all 方法用于将多个 Promise 实例包装成一个新的 Promise 实例。<br> <code>var p = Promise.all([p1, p2, p3]);</code><br>上面的代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例；如果不是，会先调用 Promise.resolve 方法，将参数转为 Promise 实例，再继续处理（Promise.all 方法的参数不一定是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例）。<br>p 的状态由 p1、p2、p3 决定，分为两种情况：</p><ol><li>只有 p1、p2、p3 的状态都变成 Fullfilled，p 的状态才会变成 Fullfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</li><li>只要 p1、p2、p3 中有一个被 Rejected，p 的状态就变成 Rejected，此时第一个被 Rejected 的实例的返回值会传递给 p 的回调函数。</li></ol><blockquote><p>如果作为参数的 Promise 实例自身定义了 catch 方法，那么他被 rejected 时并不会触发 Promise.all() 的 catch 方法。</p></blockquote><h3 id="race-方法"><a href="#race-方法" class="headerlink" title="race 方法"></a>race 方法</h3><p>race 方法同样是将多个 Promise 实例包装成一个新的 Promise 实例。但 p1、p2、p3 中有一个实例率先改变状态，p 的状态就会改变。那个最先改变的 Promise 实例的返回值就传递给 p 的回调函数。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//如果 5 秒钟内 fetch 没有返回结果，p 将变为 Rejected，触发 catch 方法</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'request timeout'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="resolve-方法"><a href="#resolve-方法" class="headerlink" title="resolve 方法"></a>resolve 方法</h3><p>resolve 方法可以将现有对象转为 Promise 对象。分为四种情况：</p><ul><li><strong>参数是一个 Promise 实例</strong>  </li></ul><p>会直接返回这个实例。</p><ul><li><strong>参数是一个 thenable 对象</strong>  </li></ul><p>指具有 then 方法的对象：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">let</span> thenable <span class="token operator">=</span> <span class="token punctuation">{</span>        then<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>resolve 方法会将这个对象转为 Promise 对象，然后立即执行 thenable 对象的 then 方法。</p><ul><li><strong>参数不是 thenable 对象或不是对象</strong>  </li></ul><p>resolve 方法返回一个新的 Promise 对象，状态为 Resolved。resolve 方法的参数会传给回调函数并立即执行。</p><ul><li><strong>不带有任何参数</strong>  </li></ul><p>直接返回一个 Resolve 状态的 Promise 对象。  </p><pre><code>&gt; 立即 resolve 的 Promise 对象是在本轮“事件循环“（event loop）结束时，而不是再下一轮”事件循环“开始时。</code></pre><pre class=" language-js"><code class="language-js">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// one</span>    <span class="token comment" spellcheck="true">// two</span>    <span class="token comment" spellcheck="true">// three</span></code></pre><pre><code>其中：</code></pre><p><code>console.log(&#39;one&#39;)</code> 立即执行；<br><code>Promise.resolve()</code> 在本轮”事件循环“结束时执行；<br><code>setTimeout(fn, 0)</code> 在下一轮”事件循环“开始时执行。</p><h3 id="reject-方法"><a href="#reject-方法" class="headerlink" title="reject 方法"></a>reject 方法</h3><p>reject 方法也会返回一个新的 Promise 实例，状态为 Rejected，reject 方法的参数会原封不动地作为 reject 的理由变成后续方法的参数，回调函数会立即执行。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> thenable <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'ERROR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>thenable<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token operator">===</span> thenable<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// Promise.reject 方法的参数是一个 thenable 对象，执行以后，后面 catch 方法的参数不是 reject 抛出的”ERROR“字符串，而是 thenable 对象。</span></code></pre><h3 id="finally-方法"><a href="#finally-方法" class="headerlink" title="finally 方法"></a>finally 方法</h3><p>finally 方法用于指定 Promise 对象最后状态如何都会执行的操作，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>让同步函数同步执行，异步函数异步执行，有两种方法。<br>第一种写法，使用 <code>async</code> 函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// now</span><span class="token comment" spellcheck="true">// next</span></code></pre><p>上面的代码中，第二行是一个立即执行的匿名函数，会立即执行里面的 <code>async</code> 函数，因此如果 <code>f</code> 是同步的，就会得到同步的结果；如果 <code>f</code> 是异步的，就可以用 <code>then</code> 指定下一步，需要注意， <code>async() =&gt; f()</code> 会吃掉 <code>f()</code> 抛出的错误，捕获错误需要使用 <code>promise.catch</code> 方法。写法如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre><p>第二种写法，使用 <code>new Promise()</code> 。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>        resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// now</span><span class="token comment" spellcheck="true">// next</span></code></pre><p>上面的代码也是用立即执行的匿名函数来执行 <code>new Promise()</code> 的。这种情况下，同步函数也是同步执行的。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Webhook 自动从 GitHub 更新博客</title>
      <link href="/2020/04/29/AutoUpdateBlog/"/>
      <url>/2020/04/29/AutoUpdateBlog/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Webhook"><a href="#什么是-Webhook" class="headerlink" title="什么是 Webhook"></a>什么是 Webhook</h2><p>Webhook 就像一个回调函数，允许当设定的 GitHub 事件被触发时，发送特定的请求到指定的 URL。利用这一点，我们可以在将本地博客提交至 GitHub 时，自动发送通知到博客服务器，执行 git pull 操作来更新服务器上的文件。</p><h2 id="使用-webhook-工具当作监听程序"><a href="#使用-webhook-工具当作监听程序" class="headerlink" title="使用 webhook 工具当作监听程序"></a>使用 webhook 工具当作监听程序</h2><p>有一个叫 <a href="https://github.com/adnanh/webhook" target="_blank" rel="noopener">webhook</a> 工具可以帮我们执行监听并执行脚本的工作。官方文档上有比较详细的安装与配置教程。<br>我的配置文件：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"hexo-webhook"</span><span class="token punctuation">,</span>  <span class="token property">"execute-command"</span><span class="token operator">:</span> <span class="token string">"/home/hexo-redeploy-webhook.sh"</span><span class="token punctuation">,</span>  <span class="token property">"command-working-directory"</span><span class="token operator">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span>  <span class="token property">"trigger-rule"</span><span class="token operator">:</span>  <span class="token punctuation">{</span>    <span class="token property">"and"</span><span class="token operator">:</span>    <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"match"</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"payload-hash-sha1"</span><span class="token punctuation">,</span>          <span class="token property">"secret"</span><span class="token operator">:</span> <span class="token string">"secret"</span><span class="token punctuation">,</span>          <span class="token property">"parameter"</span><span class="token operator">:</span>          <span class="token punctuation">{</span>            <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"header"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"X-Hub-Signature"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="打开-Github-的-Webhook-功能"><a href="#打开-Github-的-Webhook-功能" class="headerlink" title="打开 Github 的 Webhook 功能"></a>打开 Github 的 Webhook 功能</h2><p>在 GitHub 上相应仓库的 Settings 中找到 Webhook 功能，添加一个钩子， <code>Payload URL</code> 填入服务器监听地址， <code>Content type</code> 选择 <code>application/x-www-form-urlencoded</code> ， <code>Secret</code> 填入上面配置文件中的 <code>secret</code> ，钩子触发中选择 push 事件，勾选 Active，这样 GitHub 端就配置完成了。</p><h2 id="编写自动更新脚本"><a href="#编写自动更新脚本" class="headerlink" title="编写自动更新脚本"></a>编写自动更新脚本</h2><p>因为服务器的 webhook 触发之后执行的是一个命令，还需要一个 shell 脚本来对博客部署目录进行更新。<br>脚本如下，因为国内网络到 GitHub 的连通性奇差，所以加入了拉取失败重试的机制。  </p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token function">cd</span> /srv/nginx/hexo_rootretry<span class="token operator">=</span>0<span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$retry</span>"</span> -lt 5 <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token function">git</span> pull    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"Hexo git pull SUCCESS."</span>        <span class="token keyword">break</span>    <span class="token keyword">fi</span>    retry<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">{</span>retry<span class="token punctuation">}</span> + 1<span class="token variable">`</span></span>    <span class="token keyword">echo</span> <span class="token string">"Hexo git pull FAIL. Retrying <span class="token variable">$retry</span> time(s)."</span><span class="token keyword">done</span></code></pre><blockquote><p><strong>一个坑</strong><br>git 如果要设置代理的话，一定要使用 <code>git config --system https.proxy socks5://127.0.0.1:1080</code> 设置，不要使用 <code>--global</code> 参数设置  </p></blockquote><p>之后每当博客更新执行 <code>hexo deploy</code> 的时候，服务器端就会自动更新页面了，免去了 SSH 进去手动更新的麻烦。</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AV1 编码测试</title>
      <link href="/2020/04/28/Misaka-Dances/"/>
      <url>/2020/04/28/Misaka-Dances/</url>
      
        <content type="html"><![CDATA[<p>使用 Video2X 生成的 1440P Misaka Dances 作为源<br>分辨率 1920*1440<br>比特率 1000 kbps<br>2pass 模式</p><h3 id="AV1-8bit"><a href="#AV1-8bit" class="headerlink" title="AV1 8bit"></a>AV1 8bit</h3><p>解码压力不高，可以流畅播放。</p><pre class=" language-bash"><code class="language-bash">.\aomenc.exe --webm -w 1920 -h 1440 --fps<span class="token operator">=</span>30/1 --cpu-used<span class="token operator">=</span>4 --bit-depth<span class="token operator">=</span>8 --color-primaries<span class="token operator">=</span>bt709 --end-usage<span class="token operator">=</span>cq --target-bitrate<span class="token operator">=</span>1000 --passes<span class="token operator">=</span>2 --pass<span class="token operator">=</span>2 --fpf<span class="token operator">=</span>8b.log -o 8b.webm y4m.y4m</code></pre><p><video controls width="100%"><source src="/media/AV1_8bit_HEAAC.mp4" type="video/webm"><br></video></p><hr><h3 id="AV1-10bit"><a href="#AV1-10bit" class="headerlink" title="AV1 10bit"></a>AV1 10bit</h3><p>1230V3 严重卡顿，8750H 卡顿，A12X 轻微卡顿，画质相比 8bit 提升极小</p><pre class=" language-bash"><code class="language-bash">.\aomenc.exe --webm -w 1920 -h 1440 --fps<span class="token operator">=</span>30/1 --cpu-used<span class="token operator">=</span>4 --bit-depth<span class="token operator">=</span>10 --color-primaries<span class="token operator">=</span>bt709 --end-usage<span class="token operator">=</span>cq --target-bitrate<span class="token operator">=</span>1000 --passes<span class="token operator">=</span>2 --pass<span class="token operator">=</span>2 --fpf<span class="token operator">=</span>10b.log -o 10b.webm y4m.y4m</code></pre><p><video controls width="100%"><source src="/media/AV1_10bit_HEAAC.mp4" type="video/webm"><br></video></p><hr><h3 id="AV1-12bit"><a href="#AV1-12bit" class="headerlink" title="AV1 12bit"></a>AV1 12bit</h3><p>解码压力更大并且有马赛克，画质相比 10bit 提升极小</p><pre class=" language-bash"><code class="language-bash">.\aomenc.exe --webm -w 1920 -h 1440 --fps<span class="token operator">=</span>30/1 --cpu-used<span class="token operator">=</span>1 --bit-depth<span class="token operator">=</span>12 --color-primaries<span class="token operator">=</span>bt709 --end-usage<span class="token operator">=</span>cq --target-bitrate<span class="token operator">=</span>1000 --passes<span class="token operator">=</span>2 --pass<span class="token operator">=</span>2 --fpf<span class="token operator">=</span>12b.log -o 12b.webm y4m.y4m</code></pre><p><video controls width="100%"><source src="/media/AV1_12bit_HEAAC.mp4" type="video/webm"><br></video></p>]]></content>
      
      
      <categories>
          
          <category> Codec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AV1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VapourSynth 输出无损视频</title>
      <link href="/2020/04/27/codec/"/>
      <url>/2020/04/27/codec/</url>
      
        <content type="html"><![CDATA[<h3 id="VapourSynth-输出-YUV4MPEG"><a href="#VapourSynth-输出-YUV4MPEG" class="headerlink" title="VapourSynth 输出 YUV4MPEG"></a>VapourSynth 输出 YUV4MPEG</h3><p> <code>vspipe -y -p script.vpy out.y4m</code></p><h3 id="VapourSynth-输出-HuffYUV"><a href="#VapourSynth-输出-HuffYUV" class="headerlink" title="VapourSynth 输出 HuffYUV"></a>VapourSynth 输出 HuffYUV</h3><p> <code>vspipe -y -p script.vpy - | ffmpeg -i pipe: -r 24 -c:v huffyuv out.avi</code></p>]]></content>
      
      
      <categories>
          
          <category> Codec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AV1 </tag>
            
            <tag> VapourSynth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>To Do List</title>
      <link href="/2020/04/04/To-Do/"/>
      <url>/2020/04/04/To-Do/</url>
      
        <content type="html"><![CDATA[<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul><li><input disabled type="checkbox"> 多写博客！</li><li><input checked disabled type="checkbox"> 为 docsify 适配 dark mode </li><li><input checked disabled type="checkbox"> 为 Live2D 添加 moc3 模型支持</li><li><input checked disabled type="checkbox"> 添加新的 Live2D 角色</li><li><input checked disabled type="checkbox"> 重构 waifu-tips, 抛弃 jquery</li></ul><h3 id="ClassRoom"><a href="#ClassRoom" class="headerlink" title="ClassRoom"></a>ClassRoom</h3><ul><li><input disabled type="checkbox"> JS 控制开关机</li><li><input disabled type="checkbox"> 角色权限管理</li><li><input disabled type="checkbox"> 扫码提交工单</li></ul>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TODO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2020/03/16/dp/"/>
      <url>/2020/03/16/dp/</url>
      
        <content type="html"><![CDATA[<h2 id="神奇口袋问题"><a href="#神奇口袋问题" class="headerlink" title="神奇口袋问题"></a>神奇口袋问题</h2><p>有一个神奇的口袋总的容积是 40，用这个口袋可以变出一些物品，这些物品的总体积必须是 40。  </p><h3 id="DP（动态规划）思路"><a href="#DP（动态规划）思路" class="headerlink" title="DP（动态规划）思路"></a>DP（动态规划）思路</h3><p>k 种物品凑成体积 w 的方法：k-1 种物品凑成体积 w 的方法数加上 k-1 种物品凑成 w-a[k] 体积+k 物品 a[k] 这一种方法<br> <code>Ways[w][k] = Ways[w][k] + Ways[w - a[k]][k - 1];</code></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> Ways<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Ways[i][j] 表示从前 j 种物品里凑出体积 i 的方法数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> cin <span class="token operator">>></span> N<span class="token punctuation">;</span> <span class="token function">memset</span><span class="token punctuation">(</span>Ways<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Ways<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组初始化值为 0</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入当前第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个商品的体积："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入第 i 个商品的体积</span>  Ways<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界条件 任意 i 个物品凑体积 0 的方法都是一种：选 0 个物品</span> <span class="token punctuation">}</span> Ways<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//边界条件 0 个物品凑 0 体积方法只有一种：选 0 个物品</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> w <span class="token operator">&lt;=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>  <span class="token punctuation">{</span>   Ways<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Ways<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//令 k 种物品里凑出体积 w 的方法数，暂由前 k-1 个物品凑成。</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//如果第 k 种物品体积小于 w</span>    <span class="token comment" spellcheck="true">//则 k 种物品凑成体积 w 的方法：k-1 种物品凑成 w + k-1 种物品凑成 w-a[k] 体积+k 物品 a[k] 这一种方法</span>    Ways<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Ways<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> Ways<span class="token punctuation">[</span>w <span class="token operator">-</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> cout <span class="token operator">&lt;&lt;</span> Ways<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h2><p>DP（动态规划）求解过程可以这样理解：对于前 i 件物品，背包容量为 j 时，所取得的最大价值（此时称为状态 3）只依赖于前两个状态。</p><p>状态 1：前 i-1 件物品，背包容量为 j。在该状态下，只要不选第 i 个物品，就可以转换到状态 3。</p><p>状态 2：前 i-1 件物品，背包容量为 j-w[i]。在该状态下，选完前 i-1 个商品后，背包还剩 w[i] 的容量，加上第 i 个物品，也可以转换到状态 3。</p><p>这里要求最大价值，所以只要从状态 1 和状态 2 中选择最大价值较大的一个即可。</p><p>`</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3500</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">13000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//w: 体积  d: 价值</span><span class="token comment" spellcheck="true">////方法一： 二维数组表示</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示取 maxn 种物品，使它们总体积不超过 maxm 的最优取法取得的价值总和</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"物品个数 n:"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"背包的总容量体积："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入物品"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"体积，单价："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组初始化值为 0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大价值："</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////方法二： 一维滚动数组</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"物品个数 n:"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"背包的总容量体积："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入物品"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"体积，单价："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组初始化 0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大价值："</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP 生命周期</title>
      <link href="/2020/03/13/Life-cycle-of-JSP/"/>
      <url>/2020/03/13/Life-cycle-of-JSP/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-0.png" alt></p><ol><li>将 JSP 页面文件翻译为 servlet 代码；</li><li>编译 servlet 代码为 class 文件；</li><li>将 servlet 载入容器并实例化类；</li><li>调用 jspInit() 方法初始化，在 servlet 实例化后只执行一次；</li><li>使用_jspService() 方法处理请求，这个方法不能重写；</li><li>当 JSP 从容器中移除时调用 jspDestroy() 方法。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UpdateLog</title>
      <link href="/2019/08/06/UpdateLog/"/>
      <url>/2019/08/06/UpdateLog/</url>
      
        <content type="html"><![CDATA[<ul><li><p>2019.07.25 框架搭建完成</p></li><li><p>2019.08.02 主题修改完成</p></li><li><p>2019.08.06 崩坏学园 2 LIVE2D 上线 <del>那么崩坏 3 的看板娘什么时候能放上 Web 呢</del></p></li><li><p>2019.08.07 部署 Hexo Admin</p></li><li><p>2019.08.10</p><ul><li>部署 HTTPS</li><li>支持 HSTS</li></ul></li><li><p>2019.08.15 更新 favicon</p></li><li><p>2020.02.25 迁移至阿里云</p></li><li><p>2020.03.01</p><ul><li>更新 nginx 1.17.8</li><li>支持 HTTP/3 h3-25 h3-26 h3-27</li><li>支持 TLS1.3</li><li>停用 TLS1.1 TLS1.2 协议  </li></ul><p>nginx 编译参数：</p></li></ul><pre class=" language-bash"><code class="language-bash">--add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_brotli --with-openssl<span class="token operator">=</span><span class="token punctuation">..</span>/quiche/deps/boringssl --with-quiche<span class="token operator">=</span><span class="token punctuation">..</span>/quiche --with-http_v2_module --with-http_v3_module --with-http_ssl_module --with-http_gzip_static_module --with-http_v2_hpack_enc --with-http_realip_module --with-threads --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-zlib<span class="token operator">=</span><span class="token punctuation">..</span>/zlib-cf --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_devel_kit --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/headers-more-nginx-module --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/lua-nginx-module-0.10.16rc4 --with-file-aio --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_http_geoip2_module --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx-fancyindex --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/nginx-dav-ext-module --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_http_substitutions_filter_module --with-libatomic --with-http_dav_module --with-http_stub_status_module</code></pre><ul><li>2020.03.05<ul><li>优化 加载速度</li><li>Live2D 音频替换为 opus</li><li>通过 webp server 替换所有图片为 webp</li><li>非首屏图片懒加载</li></ul></li><li>2020.03.12 新增 服务器 webhook 自动部署</li><li>2020.03.13  <ul><li>修复 懒加载导致的首页图片错位</li><li>更新 全局配色</li></ul></li><li>2020.03.14<ul><li>部署 zabbix grafana</li></ul></li><li>2020.03.15<ul><li>申请提交 HSTS preload list</li></ul></li><li>2020.03.24<ul><li>移除主页轮播图相关代码</li></ul></li><li>2020.05.08<ul><li>更换 DNS 解析服务至 DNSPod</li><li><del>为网站增加 Cloudflare CDN</del></li></ul></li><li>2020.05.12<ul><li><del>鉴于 Cloudflare 在国内是减速 CDN 再次更换为百度云加速</del></li><li>修复 Live2D 关闭后刷新页面会再次出现的问题</li></ul></li><li>2020.05.13<ul><li>添加显示看板娘按钮</li></ul></li><li>2020.05.24<ul><li>背景音乐增加到 15 首，Safari 使用 CAF 封装 Opus 编码，其他浏览器使用 OGG 封装 Vorbis 编码</li></ul></li><li>2020.07.26<ul><li>将大部分库替换为 jsDeliver 的 CDN 地址</li></ul></li><li>2020.07.27<ul><li>根据 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a> 又做了部分性能优化，1M 带宽真是太难了</li></ul></li><li>2020.08.01<ul><li>图片懒加载使用 <a href="https://css-tricks.com/aspect-ratio-boxes/" target="_blank" rel="noopener">Aspect Ratio Boxes</a> 方案</li></ul></li><li>2020.08.04<ul><li>去除 <code>favicon-16x16.png</code> ，使 FireFox 默认加载 32x32 的 favicon</li><li>去除 <code>favicon.png</code></li></ul></li><li>2020.08.07<ul><li>基于 docsify 的简洁版博客<del>笔记本</del>上线</li></ul></li><li>2020.08.10<ul><li>为 docsify 适配深色模式，支持自动切换和手动<del>拉绳</del>切换</li></ul></li><li>2020.08.11<ul><li>抛弃 Aplayer，使用自己写的逻辑播放 BGM</li><li>点线背景在横向分辨率小于 1040px 的设备上将不会加载</li></ul></li><li>2020.08.12<ul><li>BGM 支持跨页面不间断播放</li><li>BGM 开始播放时淡入音量至设定值</li></ul></li><li>2020.08.13<ul><li>重写 matery.js, 剔除 jQuery 依赖</li><li>重写 waifu-tips.js, 剔除 jQuery 依赖</li><li>增加 2 首 BGM</li><li>标签、分类、归档页面图片懒加载修复</li><li>取消移动端的卡片 hover 效果</li><li>移除 AOS 库及相关标签属性</li><li>移除 ScrollProgress 库</li><li>Live2D 现在只在逻辑像素宽度大于 1040px 时显示</li></ul></li><li>2020.08.14<ul><li>为 .mtn 加上了 brotli 压缩</li><li>修复文章内容页面底部的错位</li></ul></li><li>2020.08.19<ul><li>替换看板娘为自己写的脚本 <a href="https://github.com/Konata09/Live2dOnWeb/" target="_blank" rel="noopener">Live2dOnWeb</a></li><li>支持 Cubism 3, Cubism 4 模型</li><li>增加 Live2D 模型到 23 个</li></ul></li><li>2020.08.26<ul><li>VPS 升级到 2M 带宽</li><li>更新 nginx 到 1.19.2</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UpdateLog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/18/hello-world/"/>
      <url>/2019/06/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
