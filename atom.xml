<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生命不息 折腾不止</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://konata.tech/"/>
  <updated>2020-10-02T03:10:19.277Z</updated>
  <id>http://konata.tech/</id>
  
  <author>
    <name>Konata</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XML 与 JSON</title>
    <link href="http://konata.tech/2020/10/02/jsonAndXml/"/>
    <id>http://konata.tech/2020/10/02/jsonAndXml/</id>
    <published>2020-10-02T02:36:01.000Z</published>
    <updated>2020-10-02T03:10:19.277Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;XML 与 JSON 都可以用来描述或者存储数据，两者都有各自的优点，使用场景取决于需求。  &lt;/p&gt;
&lt;h2 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Tools" scheme="http://konata.tech/categories/Tools/"/>
    
    
      <category term="JSON" scheme="http://konata.tech/tags/JSON/"/>
    
      <category term="XML" scheme="http://konata.tech/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的继承</title>
    <link href="http://konata.tech/2020/10/01/inheritanceInJavaScript/"/>
    <id>http://konata.tech/2020/10/01/inheritanceInJavaScript/</id>
    <published>2020-10-01T05:36:36.000Z</published>
    <updated>2020-10-01T10:00:14.845Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;继承是面向对象软件技术当中的一个概念，与多态、封装共为面向对象的三个基本特征。继承可以使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。  &lt;/p&gt;
&lt;h2 id=&quot;原型链继承&quot;&gt;&lt;a href=&quot;#原型链继承&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器事件总结</title>
    <link href="http://konata.tech/2020/09/28/browserEvent/"/>
    <id>http://konata.tech/2020/09/28/browserEvent/</id>
    <published>2020-09-28T00:11:31.000Z</published>
    <updated>2020-09-28T00:30:20.337Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;常用浏览器事件与 DOM 事件，包括鼠标事件、键盘事件、框架/对象事件、表单事件、剪贴板事件、打印事件、拖动事件、多媒体事件、动画事件、过渡事件。&lt;/p&gt;
&lt;h2 id=&quot;浏览器事件&quot;&gt;&lt;a href=&quot;#浏览器事件&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Browser" scheme="http://konata.tech/categories/Browser/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
      <category term="Browser" scheme="http://konata.tech/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>防抖与节流</title>
    <link href="http://konata.tech/2020/09/24/debounceAndThrottle/"/>
    <id>http://konata.tech/2020/09/24/debounceAndThrottle/</id>
    <published>2020-09-24T03:33:19.000Z</published>
    <updated>2020-09-24T03:36:39.389Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;防抖 (debounce) 与节流 (throttle) 都是控制事件处理函数执行频率的方法，当函数会进行 DOM 操作或者具有请求服务器等行为并且作为高频事件例如 &lt;code&gt;onscroll&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 严格模式</title>
    <link href="http://konata.tech/2020/09/22/strictMode/"/>
    <id>http://konata.tech/2020/09/22/strictMode/</id>
    <published>2020-09-22T01:18:32.000Z</published>
    <updated>2020-09-22T03:13:41.854Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;JavaScript 的严格模式 (strict mode)，即在严格的条件下运行。严格模式消除了 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为；消除代码运行的一些不安全之处，保证代码运行的安全；提高了引擎的效率，增加运行速度；为未来新的
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的堆栈</title>
    <link href="http://konata.tech/2020/09/18/stackAndHeap/"/>
    <id>http://konata.tech/2020/09/18/stackAndHeap/</id>
    <published>2020-09-18T07:53:17.000Z</published>
    <updated>2020-09-18T08:40:57.157Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;堆 (Heap) 是动态分配的内存，大小不定也不会自动释放，栈 (stack) 为自动分配的内存空间，在代码执行过程中自动释放。  &lt;/p&gt;
&lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>在 Liunx 中查找文件</title>
    <link href="http://konata.tech/2020/09/14/findCommand/"/>
    <id>http://konata.tech/2020/09/14/findCommand/</id>
    <published>2020-09-14T07:31:39.000Z</published>
    <updated>2020-09-14T08:04:48.576Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;locate&quot;&gt;&lt;a href=&quot;#locate&quot; class=&quot;headerlink&quot; title=&quot;locate&quot;&gt;&lt;/a&gt;locate&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;locate&lt;/code&gt; 命令需要安装 &lt;code&gt;mlocate&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="Ops" scheme="http://konata.tech/categories/Ops/"/>
    
    
      <category term="Linux" scheme="http://konata.tech/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Thunk 函数</title>
    <link href="http://konata.tech/2020/09/13/thunkFunction/"/>
    <id>http://konata.tech/2020/09/13/thunkFunction/</id>
    <published>2020-09-13T14:45:30.000Z</published>
    <updated>2020-09-13T14:57:03.539Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;编译器的求值策略通常分为传值调用以及传名调用，Thunk 函数是应用于编译器的传名调用实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体，这个临时函数就叫做 Thunk 函数。  &lt;/p&gt;
&lt;h2 id=&quot;求值策略&quot;&gt;&lt;a href=&quot;#求值策略&quot;
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>事件流模型</title>
    <link href="http://konata.tech/2020/09/11/eventStreamModel/"/>
    <id>http://konata.tech/2020/09/11/eventStreamModel/</id>
    <published>2020-09-11T12:31:43.000Z</published>
    <updated>2020-09-11T13:13:18.696Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;事件捕获 (Event Capturing) 是一种从上而下的传播方式，以 &lt;code&gt;click&lt;/code&gt; 事件为例，其会从最外层根节向内传播到达点击的节点，为从最外层节点逐渐向内传播直到目标节点的方式。&lt;br&gt;事件冒泡 (Event Bubbling)
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://konata.tech/2020/09/10/closures/"/>
    <id>http://konata.tech/2020/09/10/closures/</id>
    <published>2020-09-10T02:52:40.000Z</published>
    <updated>2020-09-10T12:31:49.091Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;函数和对其词法环境 (lexical environment) 的引用捆绑在一起构成&lt;strong&gt;闭包 (closure)&lt;/strong&gt;，也就是说，闭包可以让你从内部函数访问外部函数作用域。在
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>匿名函数与自执行函数</title>
    <link href="http://konata.tech/2020/09/08/anonymousFunction/"/>
    <id>http://konata.tech/2020/09/08/anonymousFunction/</id>
    <published>2020-09-08T10:02:37.000Z</published>
    <updated>2020-09-10T01:12:00.257Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;匿名函数&quot;&gt;&lt;a href=&quot;#匿名函数&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 中的变量提升</title>
    <link href="http://konata.tech/2020/09/07/hoistedVariablesInJs/"/>
    <id>http://konata.tech/2020/09/07/hoistedVariablesInJs/</id>
    <published>2020-09-07T12:58:24.000Z</published>
    <updated>2020-09-08T23:34:00.473Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;JavaScript 中的一切声明 ( &lt;code&gt;var&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; , &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;function&lt;/code&gt; , &lt;code&gt;function*&lt;/code&gt; ,
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Apply(), Call(), Bind() 的区别</title>
    <link href="http://konata.tech/2020/09/06/differenceBetweenApplyCallBind/"/>
    <id>http://konata.tech/2020/09/06/differenceBetweenApplyCallBind/</id>
    <published>2020-09-06T05:06:25.000Z</published>
    <updated>2020-09-06T05:24:32.972Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;每个 &lt;code&gt;Function&lt;/code&gt; 对象都存在 &lt;code&gt;apply()&lt;/code&gt; , &lt;code&gt;call()&lt;/code&gt; , &lt;code&gt;bind()&lt;/code&gt; 方法，其作用都是可以在特定的作用域中调用函数，等于设置函数体内
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原型与原型链</title>
    <link href="http://konata.tech/2020/09/05/prototypeInJS/"/>
    <id>http://konata.tech/2020/09/05/prototypeInJS/</id>
    <published>2020-09-05T08:37:23.000Z</published>
    <updated>2020-09-19T11:30:29.998Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; 常被描述为一种基于原型的语言 (prototype-based
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Map 与 WeakMap</title>
    <link href="http://konata.tech/2020/09/04/mapAndWeakmap/"/>
    <id>http://konata.tech/2020/09/04/mapAndWeakmap/</id>
    <published>2020-09-04T03:00:28.000Z</published>
    <updated>2020-09-04T03:01:10.985Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;code&gt;Map&lt;/code&gt; 对象用来保存键值对，并且能够记住键的原始插入顺序，任何对象或者原始值都可以作为键或者是值。&lt;br&gt;&lt;code&gt;WeakMap&lt;/code&gt; 对象同样用来保存键值对，对于键是弱引用的而且必须为一个对象，而值可以是任意的对象或者原始值。 
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://konata.tech/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Set 与 WeakSet</title>
    <link href="http://konata.tech/2020/09/02/setAndWeakset/"/>
    <id>http://konata.tech/2020/09/02/setAndWeakset/</id>
    <published>2020-09-02T08:51:29.000Z</published>
    <updated>2020-09-02T12:35:01.904Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;code&gt;Set&lt;/code&gt; 对象允许存储任何类型的唯一值，无论是原始值或者是对象引用， &lt;code&gt;Set&lt;/code&gt; 对象中的值不会重复。&lt;br&gt;&lt;code&gt;WeakSet&lt;/code&gt; 对象允许存储对象弱引用的唯一值， &lt;code&gt;WeakSet&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://konata.tech/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://konata.tech/2020/09/01/ajax/"/>
    <id>http://konata.tech/2020/09/01/ajax/</id>
    <published>2020-09-01T06:33:01.000Z</published>
    <updated>2020-09-01T12:14:55.508Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Ajax (Asynchronous JavaScript and XML)&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>GCC Toolset 的安装和使用</title>
    <link href="http://konata.tech/2020/08/25/InstallGCCToolset/"/>
    <id>http://konata.tech/2020/08/25/InstallGCCToolset/</id>
    <published>2020-08-25T04:24:19.000Z</published>
    <updated>2020-08-25T05:03:50.680Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;常用的 Linux 发行版一般不会自带最新的 GCC 等编译工具，如果我们想体验最新的 C++ 语法特性，就免不了要自己编译 GCC
        
      
    
    </summary>
    
      <category term="Ops" scheme="http://konata.tech/categories/Ops/"/>
    
    
      <category term="gcc" scheme="http://konata.tech/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>Fetch API</title>
    <link href="http://konata.tech/2020/08/12/fetch/"/>
    <id>http://konata.tech/2020/08/12/fetch/</id>
    <published>2020-08-12T08:47:11.000Z</published>
    <updated>2020-08-12T08:59:20.993Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;fetch()&lt;/code&gt; 方法定义在 &lt;code&gt;Window&lt;/code&gt; 对象以及
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 导出表格</title>
    <link href="http://konata.tech/2020/08/05/JavaScriptExportSheet/"/>
    <id>http://konata.tech/2020/08/05/JavaScriptExportSheet/</id>
    <published>2020-08-05T14:13:35.000Z</published>
    <updated>2020-08-05T16:39:06.571Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;导出-CSV&quot;&gt;&lt;a href=&quot;#导出-CSV&quot; class=&quot;headerlink&quot; title=&quot;导出 CSV&quot;&gt;&lt;/a&gt;导出 CSV&lt;/h2&gt;&lt;p&gt;JavaScript 导出 CSV 比较简单，只需要根据 CSV
        
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://konata.tech/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://konata.tech/tags/JavaScript/"/>
    
      <category term="Excle" scheme="http://konata.tech/tags/Excle/"/>
    
  </entry>
  
</feed>
